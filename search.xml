<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[敲代码的小铁匠的简历]]></title>
      <url>/2018/06/08/c#%E7%AE%80%E5%8E%86/</url>
      <content type="html"><![CDATA[<h1 id="c-程序员求职简历"><a href="#c-程序员求职简历" class="headerlink" title="c#程序员求职简历"></a>c#程序员求职简历</h1><hr>
<h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><ul>
<li>何玉珂/男/1994 </li>
<li>本科/洛阳理工学院/计算机科学与技术 </li>
<li>工作年限：1年</li>
<li>手机：188489567**</li>
<li>Email：123@heyuke.cn</li>
<li>技术博客：<a href="https://hyke123.github.io/" target="_blank" rel="external">https://hyke123.github.io/</a></li>
<li>期望职位：c# asp.net 开发</li>
</ul>
<hr>
<h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><h2 id="河南中浩科技公司-（-2017年7月-至今-）"><a href="#河南中浩科技公司-（-2017年7月-至今-）" class="headerlink" title="河南中浩科技公司 （ 2017年7月 ~ 至今 ）"></a>河南中浩科技公司 （ 2017年7月 ~ 至今 ）</h2><h3 id="集卡ETC系统"><a href="#集卡ETC系统" class="headerlink" title="集卡ETC系统"></a>集卡ETC系统</h3><p>该系统主要功能类似高速收费站ETC不停车收费，适用车辆为大型集装箱卡车。实现原理是通过安装在车辆上的obu卡片和装在路口的感应天线进行无线通信，上位机读取车辆信息进行相关逻辑判断，然后控制道闸以及led显示屏进行信息提示。该系统的工作原理是通过上位机和下位机的网口通信以及上位机和道闸的串口通信。该系统采用webform进行开发，其中用到socket通信以及UI多线程技术。其中记录扣费信息是通过调用java开发的接口来进行实现。</p>
<h3 id="智能场站系统"><a href="#智能场站系统" class="headerlink" title="智能场站系统"></a><strong>智能场站系统</strong></h3><p>该系统是为郑州国际陆港拼箱部的堆场管理设计的，主要是完成客户送货的接收，订单入库，订单的分柜管理和装箱方案的设计。整个项目结构依旧采用传统的三层，技术框架采用ASP.NET MVC+EF+SQLSERVER，其中EF采用的是database first，更符合一般的开发思路，前台最初使用jquery+bootstrap，后来用vue.js和element进行了部分页面的改写，其中vue.js通过标签引入直接开发，未使用node.js和webpack进行打包部署。同时对于项目中的接货部分开发了微信小程序来进行辅助扫码接货。目前该系统仍在开发中。</p>
<h3 id="郑州国际陆港订舱系统"><a href="#郑州国际陆港订舱系统" class="headerlink" title="郑州国际陆港订舱系统"></a>郑州国际陆港订舱系统</h3><p>该系统是郑州国际陆港的订舱服务平台，主要完成客户订舱下单以及辅助公司各部门同事的日常办公。在这个系统的一些工作主要是配合其他同事完成一些模块的开发，该系统框架采用的是webform,数据访问层对原生的ado.net进行了一层封装，自己在开发的时候封装了一个ajaxBase页面，使其开发时能够类似mvc方式，并在处理Dto传输映射时使用了一些反射技术。</p>
<hr>
<h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><ul>
<li>能够操作C#和.NET Framework开发、熟悉B/S、C/S模式编程，有良好的代码习惯</li>
<li>能够使用ASP.NET Web Forms 和一般处理程序+静态页进行Web开发</li>
<li>能够使用ASP.NET Mvc进行开发，了解Mvc中的模型绑定，路由，过滤器等相关技术</li>
<li>掌握ADO.NET，了解Entity Framework、ORM、 Linq To SQL</li>
<li>掌握SQL Server数据库，掌握关系型数据库的设计，掌握T-SQL语句</li>
<li>掌握前端相关技术（HTML、JavaScript、Ajax、Mvvm），能使用JQuery和相关UI插件，了解vue.js。</li>
<li>了解并且能够使用三层架构搭建项目。</li>
</ul>
<h2 id="参考技能关键字"><a href="#参考技能关键字" class="headerlink" title="参考技能关键字"></a>参考技能关键字</h2><ul>
<li>ASP.NET MVC</li>
<li>EF+LINQ </li>
<li>前后端分离、跨域</li>
<li>VUE.JS、 JQUERY</li>
<li>SQLSERVER</li>
</ul>
<hr>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>
]]></content>
      
        <categories>
            
            <category> 求职 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 求职 </tag>
            
            <tag> 工作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bootStrapTable 使用相关]]></title>
      <url>/2018/01/29/bootStrapTable%20%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>一般选项按照注释即可理解意思，主要是<strong>配字段</strong>—如何将ViewModel的属性显示成表格的字段。</p>
<ul>
<li><p>一般配置：  { title: ‘仓位号’, field: ‘OrderId’, align: ‘center’ }</p>
</li>
<li><p>列不可见：{ title: ‘id’, field: ‘Id’, visible: false }, visible: false。</p>
</li>
<li><p>格式化列： 主要是 formatter: function (value, row, index) {}函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;  <span class="attr">title</span>: <span class="string">'状态'</span>,<span class="attr">field</span>: <span class="string">'StatusType'</span>,<span class="attr">align</span>: <span class="string">'center'</span>,<span class="attr">formatter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value, row, index</span>) </span>&#123; <span class="keyword">if</span> (value == <span class="string">'待审核'</span>) &#123;&#125;&#125;,</div></pre></td></tr></table></figure>
</li>
</ul>
<p>详细的配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#tb_receiveInfo'</span>).bootstrapTable(&#123;</div><div class="line">           url: <span class="string">'/ReceiveGoods/ShowReceive'</span>,         <span class="comment">//请求后台的URL（*）</span></div><div class="line">           method: <span class="string">'post'</span>,                      <span class="comment">//请求方式（*）</span></div><div class="line">           toolbar: <span class="string">'#toolbar'</span>,                <span class="comment">//工具按钮用哪个容器</span></div><div class="line">           striped: <span class="literal">true</span>,                      <span class="comment">//是否显示行间隔色</span></div><div class="line">           cache: <span class="literal">false</span>,                       <span class="comment">//是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）</span></div><div class="line">           pagination: <span class="literal">true</span>,                   <span class="comment">//是否显示分页（*）</span></div><div class="line">           sortable: <span class="literal">true</span>,                     <span class="comment">//是否启用排序</span></div><div class="line">           sortOrder: <span class="string">"asc"</span>,                   <span class="comment">//排序方式</span></div><div class="line">           queryParams: oTableInit.queryParams,<span class="comment">//传递参数（*）</span></div><div class="line">           sidePagination: <span class="string">"client"</span>,           <span class="comment">//分页方式：client客户端分页，server服务端分页（*）</span></div><div class="line">           pageNumber: <span class="number">1</span>,                       <span class="comment">//初始化加载第一页，默认第一页</span></div><div class="line">           pageSize: <span class="number">10</span>,                       <span class="comment">//每页的记录行数（*）</span></div><div class="line">           pageList: [<span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>],        <span class="comment">//可供选择的每页的行数（*）</span></div><div class="line">           search: <span class="literal">true</span>,                       <span class="comment">//是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大</span></div><div class="line">           strictSearch: <span class="literal">false</span>,</div><div class="line">           showColumns: <span class="literal">true</span>,                  <span class="comment">//是否显示所有的列</span></div><div class="line">           showRefresh: <span class="literal">false</span>,                  <span class="comment">//是否显示刷新按钮</span></div><div class="line">           minimumCountColumns: <span class="number">2</span>,             <span class="comment">//最少允许的列数</span></div><div class="line">           clickToSelect: <span class="literal">true</span>,                <span class="comment">//是否启用点击选中行</span></div><div class="line">          <span class="comment">// height: 500,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度</span></div><div class="line">           uniqueId: <span class="string">"ID"</span>,                     <span class="comment">//每一行的唯一标识，一般为主键列</span></div><div class="line">           showToggle: <span class="literal">false</span>,                    <span class="comment">//是否显示详细视图和列表视图的切换按钮</span></div><div class="line">           cardView: <span class="literal">false</span>,                    <span class="comment">//是否显示详细视图</span></div><div class="line">           detailView: <span class="literal">false</span>,                   <span class="comment">//是否显示父子表</span></div><div class="line">           columns: [&#123;</div><div class="line">               checkbox: <span class="literal">true</span></div><div class="line">           &#125;, &#123; <span class="attr">title</span>: <span class="string">'id'</span>, <span class="attr">field</span>: <span class="string">'Id'</span>, <span class="attr">visible</span>: <span class="literal">false</span> &#125;,</div><div class="line">           &#123; <span class="attr">title</span>: <span class="string">'仓位号'</span>, <span class="attr">field</span>: <span class="string">'OrderId'</span>, <span class="attr">align</span>: <span class="string">'center'</span> &#125;,</div><div class="line">           &#123; <span class="attr">title</span>: <span class="string">'接货编号'</span>, <span class="attr">field</span>: <span class="string">'ReceiveNum'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</div><div class="line">           &#123; <span class="attr">title</span>: <span class="string">'接货日期'</span>, <span class="attr">field</span>: <span class="string">'ReceiveDate'</span>, <span class="attr">align</span>: <span class="string">'center'</span> &#125;,</div><div class="line">           &#123; <span class="attr">title</span>: <span class="string">'班列日期'</span>, <span class="attr">field</span>: <span class="string">'TrainDate'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</div><div class="line">           &#123; <span class="attr">title</span>: <span class="string">'业务部门'</span>, <span class="attr">field</span>: <span class="string">'BusinessDepart'</span>, <span class="attr">align</span>: <span class="string">'center'</span> &#125;,</div><div class="line">           &#123; <span class="attr">title</span>: <span class="string">'货物名称'</span>, <span class="attr">field</span>: <span class="string">'GoodsName'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</div><div class="line">           &#123; <span class="attr">title</span>: <span class="string">'包装方式'</span>, <span class="attr">field</span>: <span class="string">'PackagingMethod'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</div><div class="line">           &#123; <span class="attr">title</span>: <span class="string">'数量'</span>, <span class="attr">field</span>: <span class="string">'GoodsNumber'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</div><div class="line">           &#123; <span class="attr">title</span>: <span class="string">'跟单员'</span>, <span class="attr">field</span>: <span class="string">'Merchandiser'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</div><div class="line">           &#123; <span class="attr">title</span>: <span class="string">'接货人'</span>, <span class="attr">field</span>: <span class="string">'ReceivePerson'</span>, <span class="attr">align</span>: <span class="string">'center'</span> &#125;,</div><div class="line">               &#123;</div><div class="line">                   field: <span class="string">'DriverSignature'</span>,</div><div class="line">                   title: <span class="string">'司机'</span>,</div><div class="line">                   align: <span class="string">'center'</span>,</div><div class="line">                   formatter: <span class="function"><span class="keyword">function</span> (<span class="params">value, row, index</span>) </span>&#123;</div><div class="line">                       <span class="keyword">return</span> <span class="string">'&lt;img  src="/ReceiveGoods/GetImg?Id='</span> + row.Id + <span class="string">'" width="30px" height="30px"  &gt;'</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125;,</div><div class="line">               &#123; <span class="attr">title</span>: <span class="string">'叉车员'</span>, <span class="attr">field</span>: <span class="string">'Driver'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</div><div class="line">               &#123; <span class="attr">title</span>: <span class="string">'到货'</span>, <span class="attr">field</span>: <span class="string">'Remark'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</div><div class="line">               &#123;</div><div class="line">                   title: <span class="string">'状态'</span>,</div><div class="line">                   field: <span class="string">'StatusType'</span>,</div><div class="line">                   align: <span class="string">'center'</span>,</div><div class="line">                   formatter: <span class="function"><span class="keyword">function</span> (<span class="params">value, row, index</span>) </span>&#123;</div><div class="line">                       <span class="keyword">if</span> (value == <span class="string">'待审核'</span>) &#123;</div><div class="line">                           <span class="keyword">return</span> <span class="string">'&lt;button type="button" class="btn btn-success  btn-sm" onclick="Aduiting(\''</span> + row.Id + <span class="string">'\')" width="22px"&gt;审核&lt;/button&gt;'</span>;</div><div class="line">                       &#125; <span class="keyword">else</span> &#123;</div><div class="line">                           <span class="keyword">return</span> <span class="string">'&lt;button type="button" class="btn btn-success  btn-sm" disabled="true" width="22px"&gt;已审核&lt;/button&gt;'</span>;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">                   </div><div class="line">               &#125;,</div><div class="line">               &#123; <span class="attr">title</span>: <span class="string">'审核时间'</span>, <span class="attr">field</span>: <span class="string">'AuditingDate'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</div><div class="line">               <span class="comment">//&#123;</span></div><div class="line">               <span class="comment">//    field: 'action1', title: 'Action', width: 120, align: 'center',</span></div><div class="line">               <span class="comment">//    formatter: function (value, row, index) &#123;</span></div><div class="line">               <span class="comment">//        //这里应该传vlaue的值即id 但是传不过去 原因未知？</span></div><div class="line">               <span class="comment">//        //实际传递的参数是this，即点击的对象a标签</span></div><div class="line">               <span class="comment">//        //还有就是调用的函数要写在初始化函数外面 原因未知？</span></div><div class="line">               <span class="comment">//        var e = '&lt;a href="#" onclick="aduiting(this)"&gt;审核 &lt;/a&gt;';</span></div><div class="line">               <span class="comment">//        var d = '&lt;a class="print_btnA" href="#"onclick = "pinrt_info()"  &gt;打印 &lt;/a&gt;';</span></div><div class="line">               <span class="comment">//        var f = '&lt;a href="#" onclick="sendMail(this)"&gt;异常处理&lt;/a&gt;';</span></div><div class="line">               <span class="comment">//        return e + d + f;</span></div><div class="line">               <span class="comment">//    &#125;</span></div><div class="line">               <span class="comment">//&#125;</span></div><div class="line">           ]</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<h4 id="获得选中行"><a href="#获得选中行" class="headerlink" title="获得选中行"></a>获得选中行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tds = $(<span class="string">"#tb_receiveInfo"</span>).bootstrapTable(<span class="string">'getSelections'</span>);</div><div class="line">           <span class="keyword">if</span> (tds.length &gt; <span class="number">1</span>) &#123;</div><div class="line">               alert(<span class="string">'只能选择一行进行编辑'</span>)</div><div class="line">               <span class="comment">// toastr.warning('只能选择一行进行编辑');</span></div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (tds.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">               alert(<span class="string">'请选择有效数据'</span>)</div><div class="line">               <span class="comment">//toastr.warning('请选择有效数据');</span></div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line">           tds = tds[<span class="number">0</span>];</div></pre></td></tr></table></figure>
<h4 id="刷新表格"><a href="#刷新表格" class="headerlink" title="刷新表格"></a>刷新表格</h4><p> $(“#tb_receiveInfo”).bootstrapTable(‘refresh’);</p>
<h4 id="客户端分页和服务端分页"><a href="#客户端分页和服务端分页" class="headerlink" title="客户端分页和服务端分页"></a>客户端分页和服务端分页</h4><p>客户端分页和服务端分页，前台部分只需将<strong>sidePagination</strong>属性设置为client或者server即可，但是后台返回的数据格式还是稍微有点不一样。</p>
<ul>
<li>客户端分页返回的样式为{data:数据}；</li>
<li>服务端分页返回的杨思为{total:总条数，rows:数据}；</li>
</ul>
<p>其中服务端分页也要注意前台到后台参数的传递，系统为我们提供两个参数，一个是<strong>limit</strong>代表页面显示条数，另一个是<strong>offset</strong>，代表偏移量。在前台利用这两个参数求出pageSize，pageIndex。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pageSize: params.limit,   <span class="comment">//页面大小       </span></div><div class="line">pageIndex: params.offset / params.limit + <span class="number">1</span>,  <span class="comment">//页码</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> bootstrapTabel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net Socket连接断开判断]]></title>
      <url>/2017/11/01/csharp%20Socket%E6%96%AD%E7%BA%BF%E5%88%A4%E6%96%AD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Socket 编程 里面怎么才能判断其中一方是否断开连接。</p>
</blockquote>
<ol>
<li><p>当断开连接的时候我饿们调用<em>receive()</em>函数从缓冲区里读数据的时候，这个时候会抛出一个异常，我们只需在捕捉这个异常，并在<em>catch</em>里面进行处理就行，然后关闭对应的socket。</p>
</li>
<li><p>还有一种方式是通过：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static bool IsSocketConnected(Socket s)</div><div class="line">&#123;</div><div class="line">           return !((s.Poll(1000, SelectMode.SelectRead) &amp;&amp; (s.Available == 0)) || 		             !s.Connected);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>​    这里主要说明<em>socket.Poll()</em>这个函数，第一个参数是超时时间，单位是微秒，第二个参数是判断可以读取的正常的socket。通过这三个条件一起进行判断，如果只判断Available或者Connected是不行的。</p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> Socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net 异步委托]]></title>
      <url>/2017/11/01/csharp%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这里讲一下自己对异步的理解，以及相关的实现及应用</p>
</blockquote>
<h4 id="什么是异步"><a href="#什么是异步" class="headerlink" title="什么是异步"></a>什么是异步</h4><p>当按照正常的代码顺序一行一行执行的时候我们可以看作是同步执行，当然有时候并不是按照代码的行数顺序执行，我们可以在这一行调用函数，这样可能从第十行一下跳到第二十行，但是这依旧是符合我们正常的代码逻辑的。</p>
<hr>
<p>现在比方说：程序要对一台服务器发起请求，我想当请求 成功以后再给服务器发送下一条信息，如果是同步执行，我们可能就是发起请求，然后一直等待，等待服务器响应后我们下面的发送信息代码才能执行，那么在连接服务器的这个过程中，我们的主线程是阻塞了的（cpu也闲置了，只进行IO操作），这样可能造成界面<strong>假死</strong>或者其他不好的影响。</p>
<p>我们希望是在对服务器发出请求 的同时，cpu可以继续处理其他事物。这就要用到异步。</p>
<p>异步委托其实就是，当委托异步调用的时候，再创建了一个线程去执行委托执向的方法。下面介绍两种具体实现方法：</p>
<p><strong>coding:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Console.WriteLine(&quot; Main Thread:&quot; + Thread.CurrentThread.ManagedThreadId);//当前线程</div><div class="line">//定义委托并用兰姆达实现</div><div class="line">Func&lt;int, int, string&gt; delFunc = (a, b) =&gt;</div><div class="line"> &#123;</div><div class="line">      Console.WriteLine(&quot; Delegate Thread:&quot; + Thread.CurrentThread.ManagedThreadId);</div><div class="line">      Thread.Sleep(2000);</div><div class="line">      return (a + b).ToString();</div><div class="line"> &#125;;</div><div class="line">string str = delFunc(3, 4);</div></pre></td></tr></table></figure>
<p>上面是普通的定义委托并调用委托的方式</p>
<hr>
<p><strong>coding:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//异步调用委托</div><div class="line">//内部原理就是：使用了一个线程池的线程去执行了委托指向的方法。</div><div class="line">//拿到异步委托的结果</div><div class="line">IAsyncResult result = delFunc.BeginInvoke(3, 4, null, null);</div><div class="line">if (!result.IsCompleted)</div><div class="line"> &#123;</div><div class="line">	//通过 IAsyncResult,可以获得该委托的相关信息,</div><div class="line">    //并验证该委托是否完成了任务,这是IsCompleted属性的功劳。</div><div class="line">  </div><div class="line">    //doSomeThingInMainThread();在主线程里做</div><div class="line">  &#125;</div><div class="line">//EndoInvoke方法会阻塞当前的线程，直到异步委托指向完成之后，才能继续往下执行。</div><div class="line">string str1 = delFunc.EndInvoke(result); </div><div class="line">Console.WriteLine(str1);</div></pre></td></tr></table></figure>
<p>上面这一种是通过轮询</p>
<hr>
<p><strong>coding</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">delFunc.BeginInvoke(5, 6, MyAsyncCallback, &quot;123&quot;);</div><div class="line">//对于BeginInvoke方法的第四个参数，可以传递任意对象，以便从回调方法中方为使用它，通过IAsyncResult的AsyncState属性来访问它。 </div><div class="line">delFunc.BeginInvoke(5, 6, MyAsyncCallback, delFunc);</div><div class="line">public static void MyAsyncCallback(IAsyncResult ar)</div><div class="line">&#123;</div><div class="line">     var del = (Func&lt;int, int, string&gt;)ar.AsyncState;</div><div class="line">     string str = del.EndInvoke(ar);</div><div class="line">     ////1、拿到异步委托执行的结果</div><div class="line">     //AsyncResult result = (AsyncResult)ar;</div><div class="line">     //var del = (Func&lt;int, int, string&gt;)result.AsyncDelegate;</div><div class="line">     //string returnValue = del.EndInvoke(result);</div><div class="line">     //Console.WriteLine(&quot;返回值是：&quot;+returnValue);</div><div class="line">     ////2、拿到给回调函数的参数。</div><div class="line">     //Console.WriteLine(&quot;传给异步回调函数的参数：&quot;+result.AsyncState);</div><div class="line">     Console.WriteLine(&quot;回调函数的线程 的id是：&quot; + Thread.CurrentThread.ManagedThreadId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这是回调函数的方式。</p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 异步 </tag>
            
            <tag> 委托 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net Socket编程（服务端）]]></title>
      <url>/2017/10/27/csharp%20Socket%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Socket 编程 里面牵涉到了多线程以及异步编程的一些相关知识，在这记录一下，看下自己的理解 </p>
</blockquote>
<p>先说服务端流程：</p>
<ol>
<li>先创建一个socket对象，参数未创建的对象的连接协议，传输方式等。</li>
<li>然后指明服务端的ip地址以及端口，将端口和ip封装成相应的对象作为参数传入刚socket.bind()函数，表示socket绑定端口开始监听（<em>调用socket.listen（）</em>）。（至此客户端已经可以进行连接服务端了）</li>
<li>监听函数的编写，主要是做个死循环，调用socket.accept（）函数监听，调用函数后到的是一个socket对象conSocket，用这个conSocket对象开始进行于客户端的数据传输。</li>
<li>传输函数的编写，也是做个死循环，调用conSocket.receive()接收数据。这里需要注意的是<strong>假如客户端关闭则调用这个函数会抛出异常</strong>，所以我们可以以此来判断客户端是否掉线。</li>
<li>函数之间是线程调用的，先创建一个监听线程封装监听函数，再在监听线程里面创建一个通信线程，用来传输数据。注意传输线程是一个带参的线程</li>
</ol>
<hr>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Net;</div><div class="line">using System.Net.Sockets;</div><div class="line">using System.Text;</div><div class="line">using System.Threading;</div><div class="line"></div><div class="line">namespace SocketPractice</div><div class="line">&#123;</div><div class="line">    class Program</div><div class="line">    &#123;</div><div class="line">        private static Socket socketSer;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            CreateSerInfo();</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static void CreateSerInfo()</div><div class="line">        &#123;</div><div class="line">            socketSer = new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);</div><div class="line">            IPAddress scIp =IPAddress.Parse(&quot;192.168.16.217&quot;);</div><div class="line">            IPEndPoint scPort = new IPEndPoint(scIp,8090);</div><div class="line"></div><div class="line">            socketSer.Bind(scPort);//创建的socket监听此端口</div><div class="line">            socketSer.Listen(20);//最大等待的连接数</div><div class="line"></div><div class="line">            Thread scWatchThread=new Thread(SerWatching);</div><div class="line">            scWatchThread.Start();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static void SerWatching()</div><div class="line">        &#123;</div><div class="line">            while (true)</div><div class="line">            &#123;</div><div class="line">                Socket connectSocket=null;//声明一个用于客户端的socket</div><div class="line">                try</div><div class="line">                &#123;</div><div class="line">                    connectSocket = socketSer.Accept();//循环监听客户端这个套接字的请求</div><div class="line">                &#125;</div><div class="line">                catch (Exception e)</div><div class="line">                &#123;</div><div class="line">                    Console.WriteLine(e);</div><div class="line">                   </div><div class="line">                &#125;</div><div class="line">               //获取监听到的这个套接字的一些信息</div><div class="line">                IPEndPoint clientIpEndPoint = connectSocket?.RemoteEndPoint as IPEndPoint;</div><div class="line">                string clientIp = clientIpEndPoint?.Address.ToString();</div><div class="line">                string clientPort = clientIpEndPoint?.Port.ToString();</div><div class="line">                Console.WriteLine(clientIp);</div><div class="line">                //构造一个带参数的线程，将监听到的这个套接字作为参数传过去</div><div class="line">                Thread transferThread = new Thread(new ParameterizedThreadStart(Rev)) &#123; IsBackground = true &#125;;</div><div class="line">                transferThread.Start(connectSocket);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static void Rev(object socket)</div><div class="line">        &#123;</div><div class="line">            Socket conSocket= socket as Socket;</div><div class="line">            while (true)</div><div class="line">            &#123;</div><div class="line">                if(conSocket == null) return;</div><div class="line">                try</div><div class="line">                &#123;</div><div class="line">                    byte[] buffer = new byte[1024 * 1024];//声明一个缓冲区</div><div class="line">                    int bufferLength = conSocket.Receive(buffer);</div><div class="line">                    string strMsg = Encoding.UTF8.GetString(buffer, 0, bufferLength);//将收到的BYTE流转化成字符串</div><div class="line">                    if (!string.IsNullOrEmpty(strMsg))</div><div class="line">                    &#123;</div><div class="line">                        string sendMsg = &quot;我收到你的信息了&quot;;</div><div class="line">                        conSocket.Send(Encoding.UTF8.GetBytes(sendMsg));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                catch (Exception e)</div><div class="line">                &#123;</div><div class="line">                    Console.WriteLine(e);</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> Socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net委托]]></title>
      <url>/2017/10/16/csharp%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<h3 id="net委托"><a href="#net委托" class="headerlink" title=".net委托"></a>.net委托</h3><p> 委托可以看成是对方法的封装，即一个指针，指向一个方法。这里主要说编程中用的比较多的三种系统内置委托。</p>
<ol>
<li>Action</li>
</ol>
<p>​         Action是无返回值的泛型委托。</p>
<p>　　 Action 表示无参，无返回值的委托</p>
<p>　　 Action<int,string> 表示有传入参数int,string无返回值的委托</int,string></p>
<p> 　　Action<int,string,bool> 表示有传入参数int,string,bool无返回值的委托</int,string,bool></p>
<p>​        Action<int,int,int,int> 表示有传入4个int型参数，无返回值的委托</int,int,int,int></p>
<p>　　 Action至少0个参数，至多16个参数，无返回值。</p>
<ol>
<li>Func</li>
</ol>
<p>​         Func是有返回值的泛型委托</p>
<p>　　 Func<int> 表示无参，返回值为int的委托</int></p>
<p>　　 Func<object,string,int> 表示传入参数为object, string 返回值为int的委托</object,string,int></p>
<p>　　 Func<object,string,int> 表示传入参数为object, string 返回值为int的委托</object,string,int></p>
<p>　　 Func<t1,t2,,t3,int> 表示传入参数为T1,T2,,T3(泛型)返回值为int的委托</t1,t2,,t3,int></p>
<p>　　 Func至少0个参数，至多16个参数，根据返回值泛型返回。必须有返回值，不可void</p>
<ol>
<li>predicate</li>
</ol>
<p>​        predicate 是返回bool型的泛型委托</p>
<p>　　 predicate<int> 表示传入参数为int 返回bool的委托</int></p>
<p>　　 Predicate有且只有一个参数，返回值固定为bool</p>
<p>　　 例：public delegate bool Predicate<t> (T obj)</t></p>
<hr>
<h4 id="泛型委托相关的一些东西"><a href="#泛型委托相关的一些东西" class="headerlink" title="泛型委托相关的一些东西"></a>泛型委托相关的一些东西</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">this.Invoke(new Action&lt;FormMode&gt;(fm =&gt;</div><div class="line">            &#123;</div><div class="line">                //lblCarType.Text = &quot;集卡车&quot;;</div><div class="line">                //lblEntrance.Text = &quot;郑州陆港集卡ETC&quot;;</div><div class="line">                lblConsumeTime.Text = DateTime.Now.ToString();</div><div class="line">                //lblETCCarNum.Text = &quot;14100531345&quot;;</div><div class="line">                lblCarNum.Text = model?.CarNumber ?? &quot;&quot;;</div><div class="line">            &#125;), model);</div></pre></td></tr></table></figure>
<p>兰姆达表达式相当于一个匿名函数 =》之前的是参数，之后的是方法体。泛型委托的那个<t>其实就是函数的参数类型。</t></p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 委托 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net多线程]]></title>
      <url>/2017/10/16/csharp%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="net-多线程"><a href="#net-多线程" class="headerlink" title=".net 多线程"></a>.net 多线程</h3><blockquote>
<p>线程牵涉的东西很多，自己只是用到了一点，学习了一点，现在把用到的学到的一点记录下来。</p>
</blockquote>
<h4 id="多线程使用场景-winform"><a href="#多线程使用场景-winform" class="headerlink" title="多线程使用场景-winform"></a>多线程使用场景-winform</h4><p>在winform中如果使用死循环就会导致窗体线程假死，从而导致不能操作窗体上控件的现象，这个问题可以使用多线程来解决。</p>
<p>线程函数通过委托传递，可以不带参数，也可以带参数（只能有一个参数且为object类型，传递的方法没有返回值），可以用一个类或结构体封装参数。</p>
<p>话不多说，直接上代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">namespace Test</div><div class="line">&#123;</div><div class="line">    class Program</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            Thread t1 = new Thread(new ThreadStart(TestMethod));</div><div class="line">            Thread t2 = new Thread(new ParameterizedThreadStart(TestMethod));</div><div class="line">            t1.IsBackground = true;</div><div class="line">            t2.IsBackground = true;</div><div class="line">            t1.Start();</div><div class="line">            t2.Start(&quot;hello&quot;);</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static void TestMethod()</div><div class="line">        &#123;</div><div class="line">            Console.WriteLine(&quot;不带参数的线程函数&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static void TestMethod(object data)</div><div class="line">        &#123;</div><div class="line">            string datastr = data as string;</div><div class="line">            Console.WriteLine(&quot;带参数的线程函数，参数为：&#123;0&#125;&quot;, datastr);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">      //使用兰姆达表达式来简化代码</div><div class="line">        Thread th = new Thread(() =&gt;</div><div class="line">        &#123;</div><div class="line">                while(true)</div><div class="line">               &#123;</div><div class="line">                                     </div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        th.IsBackground = true;//会随着主线程的关闭关闭这个子线程</div><div class="line">        th.Priority = ThreadPriority.Highest;</div><div class="line">        th.Start();            </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="跨线程访问"><a href="#跨线程访问" class="headerlink" title="跨线程访问"></a>跨线程访问</h4><p>一旦在winform 中使用了多线程，就会存在跨线程访问控件的问题，解决方案如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void UpdateWindowInfo(FormMode model)</div><div class="line">        &#123;</div><div class="line">            this.Invoke(new Action&lt;FormMode&gt;(fm =&gt;</div><div class="line">            &#123;</div><div class="line">                //lblCarType.Text = &quot;集卡车&quot;;</div><div class="line">                //lblEntrance.Text = &quot;郑州陆港集卡ETC&quot;;</div><div class="line">                lblConsumeTime.Text = DateTime.Now.ToString();</div><div class="line">                //lblETCCarNum.Text = &quot;14100531345&quot;;</div><div class="line">                lblCarNum.Text = model?.CarNumber ?? &quot;&quot;;</div><div class="line">                model.TradeMessge = &quot;&quot;;</div><div class="line">            &#125;), model);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<hr>
<p>关于多线程的内容很多，还有线程池，线程的同步异步调用以及锁 task等内容，这些东西看了一些，但是没怎么看懂，所以就不写了。</p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net反射]]></title>
      <url>/2017/10/16/csharp%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<h3 id="net反射"><a href="#net反射" class="headerlink" title=".net反射"></a>.net反射</h3><blockquote>
<p>目前想到的反射利用场景是前台页面使用ajax调用后台方法时，在一般处理程序中，根据请求的方法名动态（自动）地来调用相对应的方法。</p>
</blockquote>
<p>下面是关于反射的一些基本介绍：</p>
<h4 id="反射单个程序集："><a href="#反射单个程序集：" class="headerlink" title="反射单个程序集："></a>反射单个程序集：</h4><p>1、Load 方法：极力推荐的一种方法，Load 方法带有一个程序集标志并载入它，Load 将引起CLR把策略应用到程序集上，先后在全局程序集缓冲区，应用程序基目录和私有路径下面查找该程序集，如果找不到该程序集系统抛出异常<br>2、LoadFrom 方法：传递一个程序集文件的路径名（包括扩展名），CLR会载入您指定的这个程序集，传递的这个参数不能包含任何关于版本号的信息，区域性，和公钥信息，如果在指定路径找不到程序集抛出异常。</p>
<h4 id="设置反射类型成员"><a href="#设置反射类型成员" class="headerlink" title="设置反射类型成员"></a>设置反射类型成员</h4><p>反射类型的成员就是反射层次模型中最下面的一层数据。我们可以通过type对象的GetMembers 方法取得一个类型的成员。如果我们使用的是不带参数的GetMembers，它只返回该类型的公共定义的静态变量和实例成员，我们也可以通过使用带参数的 GetMembers通过参数设置来返回指定的类型成员。具体参数参考msdn 中system.reflection.bindingflags 枚举类型的详细说明。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//设置需要返回的类型的成员内容</div><div class="line">bindingFlags bf=bingdingFlags.DeclaredOnly|bingdingFlags.Nonpublic|BingdingFlags.Public;</div><div class="line">foreach (MemberInfo mi int t.getmembers(bf))</div><div class="line">&#123;</div><div class="line">       writeline(mi.membertype)    //输出指定的类型成员</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="通过反射创建类型的实例："><a href="#通过反射创建类型的实例：" class="headerlink" title="通过反射创建类型的实例："></a>通过反射创建类型的实例：</h4><p>通过反射可以获取程序集的类型，我们就可以根据获得的程序集类型来创建该类型新的实例，这也是前面提到的在运行时创建对象实现晚绑定的功能<br>我们可以通过下面的几个方法实现：<br>1、System.Activator 的CreateInstance方法。该方法返回新对象的引用。具体使用方法参见msdn<br>2、System.Activator 的createInstanceFrom 与上一个方法类似，不过需要指定类型及其程序集<br>3、System.Appdomain 的方法：createInstance,CreateInstanceAndUnwrap,CreateInstranceFrom和CreateInstraceFromAndUnwrap<br>4、System.type的InvokeMember实例方法：这个方法返回一个与传入参数相符的构造函数，并构造该类型。<br>5、System.reflection.constructinfo 的Invoke实例方法</p>
<h4 id="反射的性能"><a href="#反射的性能" class="headerlink" title="反射的性能"></a>反射的性能</h4><p>使用反射来调用类型或者触发方法，或者访问一个字段或者属性时clr 需要做更多的工作：校验参数，检查权限等等，所以速度是非常慢的。所以尽量不要使用反射进行编程，对于打算编写一个动态构造类型（晚绑定）的应用程序，可以采取以下的几种方式进行代替：<br>1、通过类的继承关系。让该类型从一个编译时可知的基础类型派生出来，在运行时生成该类型的一个实例，将对其的引用放到其基础类型的一个变量中，然后调用该基础类型的虚方法。<br>2、通过接口实现。在运行时，构建该类型的一个实例，将对其的引用放到其接口类型的一个变量中，然后调用该接口定义的虚方法。<br>3、通过委托实现。让该类型实现一个方法，其名称和原型都与一个在编译时就已知的委托相符。在运行时先构造该类型的实例，然后在用该方法的对象及名称构造出该委托的实例，接着通过委托调用你想要的方法。这个方法相对与前面两个方法所作的工作要多一些，效率更低一些。</p>
<hr>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">System.Reflection.Assembly ass = Assembly.LoadFrom(Server.MapPath(&quot;bin/swordyang.dll&quot;)); //加载DLL</div><div class="line">System.Type t = ass.GetType(&quot;cn.SwordYang.TextClass&quot;);//获得类型</div><div class="line">object o = System.Activator.CreateInstance(t);//创建实例</div><div class="line">System.Reflection.MethodInfo mi = t.GetMethod(&quot;RunJs&quot;);//获得方法</div><div class="line">mi.Invoke(o, new object[] &#123; this.Page,&quot;alert(&apos;测试反射机制&apos;)&quot;&#125;);//调用方法</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 反射 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跨域问题]]></title>
      <url>/2017/08/21/MVC%E5%92%8CWEBAPI%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="Web-api-的解决方案"><a href="#Web-api-的解决方案" class="headerlink" title="Web api 的解决方案"></a>Web api 的解决方案</h3><ol>
<li>需要在web.config中的<system.webserver>节点中添加如下的内容</system.webserver></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;httpProtocol&gt;</div><div class="line">&lt;customHeaders&gt;</div><div class="line">&lt;add name=&quot;Access-Control-Allow-Origin&quot; value=&quot;*&quot; /&gt;</div><div class="line">&lt;add name=&quot;Access-Control-Allow-Headers&quot; value=&quot;Content-Type&quot; /&gt;</div><div class="line">&lt;add name=&quot;Access-Control-Allow-Methods&quot; value=&quot;GET, POST, PUT, DELETE, OPTIONS&quot; /&gt;</div><div class="line">&lt;/customHeaders&gt;</div><div class="line">&lt;/httpProtocol&gt;</div></pre></td></tr></table></figure>
<ol>
<li>在App_Start文件夹下的WebApiConfig.cs类中加入下面的函数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/// &lt;summary&gt;</div><div class="line">      /// 允许跨域调用</div><div class="line">      /// &lt;/summary&gt;</div><div class="line">      /// &lt;param name=&quot;config&quot;&gt;&lt;/param&gt;</div><div class="line">      private static void EnableCrossSiteRequests(HttpConfiguration config)</div><div class="line">      &#123;</div><div class="line">          //对所有的请求来源没有任何限制</div><div class="line">          var cors = new EnableCorsAttribute(</div><div class="line">              origins: &quot;*&quot;,</div><div class="line">              headers: &quot;*&quot;,</div><div class="line">              methods: &quot;*&quot;</div><div class="line">          );</div><div class="line">          config.EnableCors(cors);</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h3 id="asp-net-mvc的解决方案"><a href="#asp-net-mvc的解决方案" class="headerlink" title="asp.net mvc的解决方案"></a>asp.net mvc的解决方案</h3><ol>
<li>只做上述步骤1即可。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> c# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[程序代码块]]></title>
      <url>/2017/08/21/%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      <content type="html"><![CDATA[<p>一些常见的代码，写下来以后记不清的时候查阅。</p>
<h4 id="生成guid代码"><a href="#生成guid代码" class="headerlink" title="生成guid代码"></a>生成guid代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var a=Guid.NewGuid().ToString();</div></pre></td></tr></table></figure>
<h4 id="序列化json字符串"><a href="#序列化json字符串" class="headerlink" title="序列化json字符串"></a>序列化json字符串</h4><p>序列化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string json = JsonConvert.SerializeObject(s);//s为要序列化的对象</div></pre></td></tr></table></figure>
<p>反序列化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = JsonConvert.DeserializeObject(json);</div><div class="line">//第二个参数为要格式化的对象类型</div><div class="line">var objectResult = JsonConvert.DeserializeAnonymousType(result.ToString(), new RootExcle());</div></pre></td></tr></table></figure>
<h4 id="数组声明方式"><a href="#数组声明方式" class="headerlink" title="数组声明方式"></a>数组声明方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int[] intArray = new int[] &#123;1,2,3&#125;;</div><div class="line">int[] intArray = new int[10];</div></pre></td></tr></table></figure>
<h4 id="写入文件代码"><a href="#写入文件代码" class="headerlink" title="写入文件代码"></a>写入文件代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public static void LogFile(string fileName, string info)</div><div class="line">&#123;</div><div class="line">           </div><div class="line">            FileStream file;</div><div class="line">            if (!File.Exists(fileName))</div><div class="line">            &#123;</div><div class="line">                file = File.Create(fileName);</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                file = new FileStream(fileName, FileMode.Append, FileAccess.Write, FileShare.ReadWrite);</div><div class="line">            &#125;</div><div class="line">            System.Text.Encoding encode = System.Text.UTF8Encoding.UTF8;</div><div class="line">            var bytes = encode.GetBytes(info);</div><div class="line">            file.Position = file.Length;</div><div class="line">            file.Write(bytes, 0, bytes.Length);</div><div class="line">            file.Flush();</div><div class="line">            file.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####查看数据碎片及清理碎片</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DBCC SHOWCONTIG (Busi_DistributionCenter_Info) WITH ALL_INDEXES</div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span> all <span class="keyword">ON</span>  [Busi_DistributionCenter_Info] <span class="keyword">REBUILD</span></div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span> all <span class="keyword">ON</span> [Busi_DistributionCenter_Info] REORGANIZE</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> c# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[非相关子查询和相关子查询执行过程详解]]></title>
      <url>/2017/08/17/%E7%9B%B8%E5%85%B3%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%92%8C%E9%9D%9E%E7%9B%B8%E5%85%B3%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h3 id="非相关子查询和相关子查询执行过程"><a href="#非相关子查询和相关子查询执行过程" class="headerlink" title="非相关子查询和相关子查询执行过程"></a><a href="http://blog.csdn.net/mascf/article/details/50288199" target="_blank" rel="external">非相关子查询和相关子查询执行过程</a></h3><p>前段时间有一个相关子查询的SQL语句，看不太懂他是如何执行的，为什么会出现那个结果。着实纠结了一把。下面来讲一下非相关子查询和相关子查询的执行过程是怎样的。</p>
<h4 id="非相关子查询"><a href="#非相关子查询" class="headerlink" title="非相关子查询"></a>非相关子查询</h4><hr>
<p>先看一个非相关子查询到sql语句。</p>
<p>需求：查询学生表student和学生成绩表grade中成绩为70分的学生的基本信息。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> t.sno,t.sname,t.sage,t.sgentle,t.sbirth,t.sdept <span class="keyword">from</span> student t <span class="keyword">where</span> t.sno <span class="keyword">in</span> (<span class="keyword">select</span> f.sno <span class="keyword">from</span> garde f <span class="keyword">where</span> f.score=<span class="number">70</span>)</div></pre></td></tr></table></figure>
<p>这个sql语句的执行时是简单的，</p>
<p>1、在grade表中找出成绩为70的学生学号sno,再将该学号返回到父查询作为where子句的条件。</p>
<p>2、在student表中找到该学号学生的其他基本信息。</p>
<h4 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h4><hr>
<p>所谓相关子查询，是指求解相关子查询不能像求解普通子查询那样，一次将子查询求解出来，然后求解父查询。相关子查询的内层查询由于与外层查询有关，因此必须反复求值。</p>
<p>下面看相关子查询的sql语句。</p>
<p>需求：在学生表student和学生成绩表grade找出参加了“计算机基础”课程并且分数在80分以上的所有学生信息。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> t.sno,t.sname,t.sage,t.sgentle,t.sbirth,sdept <span class="keyword">from</span> student t <span class="keyword">where</span> <span class="number">80</span>&lt;=(<span class="keyword">select</span> f.score <span class="keyword">from</span> grade f <span class="keyword">where</span> f.sno=t.sno <span class="keyword">and</span> f.cname=<span class="string">'计算机基础'</span>)</div></pre></td></tr></table></figure>
<p>该子查询的执行流程：</p>
<p>1、 先从父查询的student表中取出第一条记录的sno值，进入子查询中，比较其where子句的条件“where f.sno=t.sno and f.cname=’计算机基础’”，符合则返回score成绩。</p>
<p>2、 返回父查询，判断父查询的where子句条件80&lt;=返回的score,如果条件为true，则返回第1条记录。</p>
<p>3、 从父查询的student表中取出第2条数据，重复上述操作，直到所有父查询中的表中记录取完为止。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><hr>
<p>对比这两个查询的sql执行过程可以看出，相关子查询和非相关子查询的不同点在于，相关子查询依赖于父查询，父查询和子查询是有联系的，尤其在子查询的where语句中更是如此。明白了他们的执行过程，再去看相关子查询的代码，一下子就明白了。</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sql </tag>
            
            <tag> （非）相关查询 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[找出相同记录里最近时间的一条]]></title>
      <url>/2017/08/16/sql%20%E6%89%BE%E5%87%BA%E7%9B%B8%E5%90%8C%E8%AE%B0%E5%BD%95%E9%87%8C%E6%9C%80%E8%BF%91%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E6%9D%A1/</url>
      <content type="html"><![CDATA[<h3 id="sql-找出相同记录里最近时间的一条"><a href="#sql-找出相同记录里最近时间的一条" class="headerlink" title="sql 找出相同记录里最近时间的一条"></a>sql 找出相同记录里最近时间的一条</h3><p>样例表如下</p>
<p>sub_dh date Gname</p>
<p>A1001 2015/4/25 B清单</p>
<p>A1002 2015/6/27 C清单</p>
<p>A1001 2015/8/23 C清单</p>
<p>A1003 2015/5/28 A清单</p>
<p>第一条记录和第三条记录编号一样，要查询出最近时间的一条记录</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> A  <span class="keyword">where</span> <span class="built_in">date</span>=(<span class="keyword">select</span> <span class="keyword">max</span>(<span class="built_in">date</span>) <span class="keyword">from</span> <span class="keyword">test</span> B <span class="keyword">where</span> A.sub_dh=B.sub_dh)</div></pre></td></tr></table></figure>
<p>首先将表根据订单号自行自连接，然后查询出表里所有的记录其时间等于连接表里最近时间的。具体执行过程可参照 <strong>非相关子查询</strong> 里面的内容，这是一个非相关子查询。</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sql </tag>
            
            <tag> 最近时间 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net爬虫]]></title>
      <url>/2017/08/16/csharp%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<h4 id="准备第三方插件"><a href="#准备第三方插件" class="headerlink" title="准备第三方插件"></a>准备第三方插件</h4><p>HtmlAgilityPack 在nuget中可以找到并下载 然后在项目中引用</p>
<h4 id="代码步骤"><a href="#代码步骤" class="headerlink" title="代码步骤"></a>代码步骤</h4><p>从指定网站把网页的html获得</p>
<p><code>WebRequest request = WebRequest.Create(&quot;http://www.hnzbcg.com.cn/hnzbcg/cgxx/cggg/A080302index_1.htm&quot;);
            WebResponse response = request.GetResponse();
            StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.GetEncoding(&quot;gb2312&quot;));
            string s = reader.ReadToEnd();</code></p>
<p>将获得的html字符串传入 这个插件的具体使用可以参考<a href="http://www.cnblogs.com/GmrBrian/p/6201237.html" target="_blank" rel="external">http://www.cnblogs.com/GmrBrian/p/6201237.html</a></p>
<p><code>HtmlDocument doc = new HtmlDocument();
            doc.LoadHtml(s);
            HtmlNode div = doc.DocumentNode.SelectSingleNode(&quot;//a[@class=&#39;GrayLink12&#39;]&quot;);
            HtmlNodeCollection hrefList = doc.DocumentNode.SelectNodes(&quot;//a[@class=&#39;GrayLink12&#39;]&quot;);
            List&lt;string&gt; list = new List&lt;string&gt;();</code></p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c#连接oracle数据库]]></title>
      <url>/2017/08/16/csharp%E8%BF%9E%E6%8E%A5oracle%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>c#连接oracle数据库</p>
<blockquote>
<p>准备工作：</p>
<p>下载并引用Oracle.ManagedDataAccess.Client </p>
</blockquote>
<h4 id="控制台测试程序"><a href="#控制台测试程序" class="headerlink" title="控制台测试程序"></a>控制台测试程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Program</div><div class="line">   &#123;</div><div class="line">       static void Main(string[] args)</div><div class="line">       &#123;</div><div class="line">           string constr = @&quot;User Id=zftest;Password=123456;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.16.84)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=orcl)))&quot;;</div><div class="line">           DataSet ds = OracleHelper.ExecuteDataset(constr, CommandType.Text, &quot;select *from dba_users&quot;);</div><div class="line">           DataTable dt = ds.Tables[0];</div><div class="line">           for (int i = 0; i &lt; dt.Rows.Count; i++)</div><div class="line">           &#123;</div><div class="line"></div><div class="line">               for (int j = 0; j &lt; dt.Columns.Count; j++)</div><div class="line">               &#123;</div><div class="line">                   Console.WriteLine(dt.Rows[i][j]);</div><div class="line">               &#125;</div><div class="line">               Console.WriteLine(&quot;\n&quot;);</div><div class="line">           &#125;</div><div class="line">           //int a=  OracleHelper.ExecuteNonQuery(constr, CommandType.Text, &quot;select *from dba_users&quot;);</div><div class="line"></div><div class="line">           int b = 0;</div><div class="line"></div><div class="line"></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="下面是OracleHelper-程序，参数是连接字符串和sql语句。"><a href="#下面是OracleHelper-程序，参数是连接字符串和sql语句。" class="headerlink" title="下面是OracleHelper 程序，参数是连接字符串和sql语句。"></a>下面是OracleHelper 程序，参数是连接字符串和sql语句。</h4><p><a href="http://www.cnblogs.com/jimcsharp/p/5590076.html" target="_blank" rel="external">http://www.cnblogs.com/jimcsharp/p/5590076.html</a></p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js 在当前日期往前推N天（除去工作日）]]></title>
      <url>/2017/08/16/js-%E5%9C%A8%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E5%BE%80%E5%89%8D%E6%8E%A8N%E5%A4%A9%EF%BC%88%E9%99%A4%E5%8E%BB%E5%B7%A5%E4%BD%9C%E6%97%A5%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>代码如下：</p>
</blockquote>
<p>JavaScript将日期往前推n天，思路是先判断当前的日期是否是工作日，是的话就继续往前推，不是的话就把这一天给过滤掉，用count计数。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"datePicker/WdatePicker.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.7.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="comment">//判断是否为工作日</span></span></div><div class="line"><span class="javascript">     <span class="function"><span class="keyword">function</span> <span class="title">isWorkday</span>(<span class="params">date</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="comment">//var date = !date ? new Date() : new Date(date);</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>(date);</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> getday = date.getDay();</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (getday == <span class="number">0</span> || getday == <span class="number">6</span>) &#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//不是返回False</span></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="javascript">        <span class="comment">//获取Date对象的年月日xxxx-xx-xx</span></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">dateToyymmdd</span>(<span class="params">d</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> month=d.getMonth()+<span class="number">1</span>;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> day = d.getDate();</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span>(month&lt;<span class="number">10</span>)&#123;</span></div><div class="line"><span class="javascript">        month = <span class="string">"0"</span>+month;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span>(day&lt;<span class="number">10</span>)&#123;</span></div><div class="line"><span class="javascript">        day = <span class="string">"0"</span>+day;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> val = d.getFullYear()+<span class="string">"-"</span>+month+<span class="string">"-"</span>+day;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span> val;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="comment">//往前推5天除去工作日</span></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params">date</span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> i=<span class="number">0</span>;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>(date);<span class="comment">//获取传入的时间</span></span></div><div class="line"><span class="javascript">    <span class="keyword">while</span>(i&lt;<span class="number">5</span>)</span></div><div class="line"><span class="undefined">    &#123;</span></div><div class="line"><span class="javascript">        d.setDate(d.getDate()<span class="number">-1</span>);<span class="comment">//获取前一天时间</span></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> val=dateToyymmdd(d);</span></div><div class="line"><span class="javascript">        <span class="comment">//alert(isWorkday("2017-7-30")) ;</span></span></div><div class="line"><span class="javascript">        <span class="comment">//alert(val+""+isWorkday(val));</span></span></div><div class="line"><span class="javascript">        <span class="keyword">if</span>(isWorkday(val))</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="undefined">            i++;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">         <span class="keyword">continue</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> val = dateToyymmdd(d);</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> val;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="javascript">  <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    $(<span class="string">"#btn"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> v=$(<span class="string">"#btn"</span>).val();</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">            $(<span class="string">"#label1"</span>).html(back(v));</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="javascript">   <span class="comment">//alert(back('2017-08-02'));</span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"btn"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"WdatePicker()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"label1"</span> &gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 时间 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
