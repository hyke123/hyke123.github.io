<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[加密解密]]></title>
      <url>/2019/04/26/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h2><h3 id="1-md5"><a href="#1-md5" class="headerlink" title="1. md5"></a>1. md5</h3><ul>
<li><p>不可逆加密</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// MD5加密,和动网上的16/32位MD5加密结果相同,</span><br><span class="line">/// 使用的UTF8编码</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;source&quot;&gt;待加密字串&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;length&quot;&gt;16或32值之一,其它则采用.net默认MD5加密算法&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;加密后的字串&lt;/returns&gt;</span><br><span class="line">public static string Encrypt(string source, int length = 32)//默认参数</span><br><span class="line">&#123;</span><br><span class="line">    if (string.IsNullOrEmpty(source)) return string.Empty;</span><br><span class="line">    HashAlgorithm provider = CryptoConfig.CreateFromName(&quot;MD5&quot;) as HashAlgorithm;</span><br><span class="line">    byte[] bytes = Encoding.UTF8.GetBytes(source);//这里需要区别编码的</span><br><span class="line">    byte[] hashValue = provider.ComputeHash(bytes);</span><br><span class="line">    StringBuilder sb = new StringBuilder();</span><br><span class="line">    switch (length)</span><br><span class="line">    &#123;</span><br><span class="line">        case 16://16位密文是32位密文的9到24位字符</span><br><span class="line">            for (int i = 4; i &lt; 12; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                sb.Append(hashValue[i].ToString(&quot;x2&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case 32:</span><br><span class="line">            for (int i = 0; i &lt; 16; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                sb.Append(hashValue[i].ToString(&quot;x2&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            for (int i = 0; i &lt; hashValue.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                sb.Append(hashValue[i].ToString(&quot;x2&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return sb.ToString();</span><br><span class="line">&#125;</span><br><span class="line">#endregion MD5</span><br><span class="line">  </span><br><span class="line">#region MD5摘要</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 获取文件的MD5摘要</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;fileName&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static string AbstractFile(string fileName)</span><br><span class="line">&#123;</span><br><span class="line">    FileStream file = new FileStream(fileName, FileMode.Open);</span><br><span class="line">    MD5 md5 = new MD5CryptoServiceProvider();</span><br><span class="line">    byte[] retVal = md5.ComputeHash(file);</span><br><span class="line">    file.Close();</span><br><span class="line">  </span><br><span class="line">    StringBuilder sb = new StringBuilder();</span><br><span class="line">    for (int i = 0; i &lt; retVal.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.Append(retVal[i].ToString(&quot;x2&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    return sb.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-DES-可逆对称加密"><a href="#2-DES-可逆对称加密" class="headerlink" title="2. DES 可逆对称加密"></a>2. DES 可逆对称加密</h3><ul>
<li>对称加密算法的优点是速度快</li>
<li>缺点是密钥管理不方便，要求共享密钥。</li>
<li>可逆对称加密  密钥长度8</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class DesEncrypt</span><br><span class="line">   &#123;</span><br><span class="line">       private static byte[] _rgbKey = ASCIIEncoding.ASCII.GetBytes(Constant.DesKey.Substring(0, 8));</span><br><span class="line">       private static byte[] _rgbIV = ASCIIEncoding.ASCII.GetBytes(Constant.DesKey.Insert(0, &quot;w&quot;).Substring(0, 8));</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// DES 加密</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;text&quot;&gt;需要加密的值&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;加密后的结果&lt;/returns&gt;</span><br><span class="line">       public static string Encrypt(string text)</span><br><span class="line">       &#123;</span><br><span class="line">           DESCryptoServiceProvider dsp = new DESCryptoServiceProvider();</span><br><span class="line">           using (MemoryStream memStream = new MemoryStream())</span><br><span class="line">           &#123;</span><br><span class="line">               CryptoStream crypStream = new CryptoStream(memStream, dsp.CreateEncryptor(_rgbKey, _rgbIV), CryptoStreamMode.Write);</span><br><span class="line">               StreamWriter sWriter = new StreamWriter(crypStream);</span><br><span class="line">               sWriter.Write(text);</span><br><span class="line">               sWriter.Flush();</span><br><span class="line">               crypStream.FlushFinalBlock();</span><br><span class="line">               memStream.Flush();</span><br><span class="line">               return Convert.ToBase64String(memStream.GetBuffer(), 0, (int)memStream.Length);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// DES解密</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;encryptText&quot;&gt;&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;解密后的结果&lt;/returns&gt;</span><br><span class="line">       public static string Decrypt(string encryptText)</span><br><span class="line">       &#123;</span><br><span class="line">           DESCryptoServiceProvider dsp = new DESCryptoServiceProvider();</span><br><span class="line">           byte[] buffer = Convert.FromBase64String(encryptText);</span><br><span class="line"></span><br><span class="line">           using (MemoryStream memStream = new MemoryStream())</span><br><span class="line">           &#123;</span><br><span class="line">               CryptoStream crypStream = new CryptoStream(memStream, dsp.CreateDecryptor(_rgbKey, _rgbIV), CryptoStreamMode.Write);</span><br><span class="line">               crypStream.Write(buffer, 0, buffer.Length);</span><br><span class="line">               crypStream.FlushFinalBlock();</span><br><span class="line">               return ASCIIEncoding.UTF8.GetString(memStream.ToArray());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-RSA-可逆非对称加密"><a href="#3-RSA-可逆非对称加密" class="headerlink" title="3. RSA 可逆非对称加密"></a>3. RSA 可逆非对称加密</h3><ul>
<li>非对称加密算法的优点是密钥管理很方便，缺点是速度慢。</li>
<li>加密钥公开，解密钥揣兜里，有什么作用呢？  保证内容只有我看得到，防止外传</li>
<li>解密钥公开，加密钥揣兜里，有什么作用呢？  保证数据不能篡改，一定来自于我</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">public class RsaEncrypt</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      /// 获取加密/解密对</span><br><span class="line">      /// Encrypt   Decrypt</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;returns&gt;Encrypt   Decrypt&lt;/returns&gt;</span><br><span class="line">      public static KeyValuePair&lt;string, string&gt; GetKeyPair()</span><br><span class="line">      &#123;</span><br><span class="line">          RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();</span><br><span class="line">          string publicKey = RSA.ToXmlString(false);</span><br><span class="line">          string privateKey = RSA.ToXmlString(true);</span><br><span class="line">          return new KeyValuePair&lt;string, string&gt;(publicKey, privateKey);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      /// 加密：内容+加密key</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;param name=&quot;content&quot;&gt;&lt;/param&gt;</span><br><span class="line">      /// &lt;param name=&quot;encryptKey&quot;&gt;加密key&lt;/param&gt;</span><br><span class="line">      /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">      public static string Encrypt(string content, string encryptKey)</span><br><span class="line">      &#123;</span><br><span class="line">          RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();</span><br><span class="line">          rsa.FromXmlString(encryptKey);</span><br><span class="line">          UnicodeEncoding ByteConverter = new UnicodeEncoding();</span><br><span class="line">          byte[] DataToEncrypt = ByteConverter.GetBytes(content);</span><br><span class="line">          byte[] resultBytes = rsa.Encrypt(DataToEncrypt, false);</span><br><span class="line">          return Convert.ToBase64String(resultBytes);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      /// 解密  内容+解密key</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;param name=&quot;content&quot;&gt;&lt;/param&gt;</span><br><span class="line">      /// &lt;param name=&quot;decryptKey&quot;&gt;解密key&lt;/param&gt;</span><br><span class="line">      /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">      public static string Decrypt(string content, string decryptKey)</span><br><span class="line">      &#123;</span><br><span class="line">          byte[] dataToDecrypt = Convert.FromBase64String(content);</span><br><span class="line">          RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();</span><br><span class="line">          RSA.FromXmlString(decryptKey);</span><br><span class="line">          byte[] resultBytes = RSA.Decrypt(dataToDecrypt, false);</span><br><span class="line">          UnicodeEncoding ByteConverter = new UnicodeEncoding();</span><br><span class="line">          return ByteConverter.GetString(resultBytes);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      /// 可以合并在一起的，，每次产生一组新的密钥</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;param name=&quot;content&quot;&gt;&lt;/param&gt;</span><br><span class="line">      /// &lt;param name=&quot;encryptKey&quot;&gt;加密key&lt;/param&gt;</span><br><span class="line">      /// &lt;param name=&quot;decryptKey&quot;&gt;解密key&lt;/param&gt;</span><br><span class="line">      /// &lt;returns&gt;加密后结果&lt;/returns&gt;</span><br><span class="line">      private static string Encrypt(string content, out string publicKey, out string privateKey)</span><br><span class="line">      &#123;</span><br><span class="line">          RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider();</span><br><span class="line">          publicKey = rsaProvider.ToXmlString(false);</span><br><span class="line">          privateKey = rsaProvider.ToXmlString(true);</span><br><span class="line"></span><br><span class="line">          UnicodeEncoding ByteConverter = new UnicodeEncoding();</span><br><span class="line">          byte[] DataToEncrypt = ByteConverter.GetBytes(content);</span><br><span class="line">          byte[] resultBytes = rsaProvider.Encrypt(DataToEncrypt, false);</span><br><span class="line">          return Convert.ToBase64String(resultBytes);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-调用方式"><a href="#4-调用方式" class="headerlink" title="4. 调用方式"></a>4. 调用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">   &#123;</span><br><span class="line">       static void Main(string[] args)</span><br><span class="line">       &#123;</span><br><span class="line">           try</span><br><span class="line">           &#123;</span><br><span class="line">               #region MD5</span><br><span class="line">               //用途：</span><br><span class="line">               //1 防止明文：加密后保存比较安全，下次加密检验；密码要复杂一点</span><br><span class="line">               //2 防篡改：文件上传；文件下载防挂马；svn</span><br><span class="line">               //3 防止抵赖：需要一个第三方认证，数字签名</span><br><span class="line">               //Console.WriteLine(MD5Encrypt.Encrypt(&quot;1&quot;));</span><br><span class="line">               //Console.WriteLine(MD5Encrypt.Encrypt(&quot;1&quot;));</span><br><span class="line">               //Console.WriteLine(MD5Encrypt.Encrypt(&quot;123456小李&quot;));</span><br><span class="line">               //Console.WriteLine(MD5Encrypt.Encrypt(&quot;113456小李&quot;));</span><br><span class="line">               //Console.WriteLine(MD5Encrypt.Encrypt(&quot;113456小李113456小李113456小李113456小李113456小李113456小李113456小李&quot;));</span><br><span class="line">               //string md5Abstract1 = MD5Encrypt.AbstractFile(@&quot;D:\ruanmou\online9\homework\1\Advanced9第一次作业优秀合集.rar&quot;);</span><br><span class="line">               //string md5Abstract2 = MD5Encrypt.AbstractFile(@&quot;D:\ruanmou\online9\homework\1\Advanced9第一次作业优秀合集 - 副本.rar&quot;);</span><br><span class="line"></span><br><span class="line">               #endregion</span><br><span class="line"></span><br><span class="line">               #region Des</span><br><span class="line">               //可逆对称加密</span><br><span class="line">               string desEn = DesEncrypt.Encrypt(&quot;王殃殃&quot;);</span><br><span class="line">               string desDe = DesEncrypt.Decrypt(desEn);</span><br><span class="line">               string desEn1 = DesEncrypt.Encrypt(&quot;张三李四&quot;);</span><br><span class="line">               string desDe1 = DesEncrypt.Decrypt(desEn1);</span><br><span class="line">               #endregion</span><br><span class="line"></span><br><span class="line">               #region Rsa</span><br><span class="line">               //可逆非对称加密</span><br><span class="line">               KeyValuePair&lt;string, string&gt; encryptDecrypt = RsaEncrypt.GetKeyPair();</span><br><span class="line">               string rsaEn1 = RsaEncrypt.Encrypt(&quot;net&quot;, encryptDecrypt.Key);</span><br><span class="line">               string rsaDe1 = RsaEncrypt.Decrypt(rsaEn1, encryptDecrypt.Value);</span><br><span class="line">               //加密钥  解密钥  钥匙的功能划分</span><br><span class="line">               //公钥  私钥      公开程度划分</span><br><span class="line"></span><br><span class="line">               //加密钥公开，解密钥揣兜里，有什么作用呢？  保证内容只有我看得到，防止外传</span><br><span class="line">               //解密钥公开，加密钥揣兜里，有什么作用呢？  保证数据不能篡改，一定来自于我</span><br><span class="line"></span><br><span class="line">               #endregion</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           catch (Exception ex)</span><br><span class="line">           &#123;</span><br><span class="line">               Console.WriteLine(ex.Message);</span><br><span class="line">           &#125;</span><br><span class="line">           Console.Read();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 加密解密 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象]]></title>
      <url>/2019/04/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol>
<li><p>什么是类？什么是对象？类和对象的区别？</p>
<p>类是具有相同特征和行为的一类事物的抽象，而对象是类的一个具体的实列。</p>
</li>
<li><p>继承的好处</p>
<ul>
<li>代码重用——子类继承父类的属性和方法，使创建子类变得很简单，实现了代码重用。</li>
<li>可以实现多态——声明父类类型变量，指向子类类型对象，实际调用的是子类的方法。</li>
<li>子类的构造函数默认继承父类无参的构造函数 构造函数是不能被继承的 只能子类去调用。</li>
</ul>
</li>
<li><p>访问修饰符</p>
<ul>
<li>private protected internal——当前程序集内部可以访问 public </li>
<li>访问级别约束<ul>
<li>子类的访问级别不能比父类的高。（会暴露父类的成员）</li>
<li>类中属性或字段的访问级别不能比所对应的类型访问级别高。</li>
<li>方法的访问级别不能比方法的参数和返回值的访问级别高。</li>
</ul>
</li>
<li>类中的成员如果不写访问修饰符默认是private。</li>
<li>类如果不加修饰符默认的是internal。</li>
</ul>
</li>
<li><p>实现多态的方式多态是指同一个类在不同场景下表现出不同的形态</p>
<ul>
<li>virtual 子类可以重写父类的虚方法。</li>
<li>abstract抽象方法。</li>
<li>接口。</li>
<li>声明父类类型变量，指向子类类型对象，然后调用相应的方法。</li>
</ul>
</li>
<li><p>接口是一种规范，定义了一组具有各种功能的方法，只有方法的声明，没有具体的实现。</p>
<ul>
<li><p>使用接口可以实现<strong>多态</strong>，增强程序的拓展性。</p>
</li>
<li><p>使用接口可以解决类的<strong>多继承</strong>问题。</p>
</li>
<li><p>接口和抽象类一样，如果子类实现改接口，必须实现里面所有的成员，除非子类为抽象。</p>
</li>
</ul>
</li>
<li><p>关于异常的一些注意事项</p>
<ul>
<li>不管有木有出现异常，finally块中代码都会执行</li>
<li>当try和catch中有return时，finally仍然会执行</li>
<li>finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数返回值是在finally执行前确定的</li>
<li>finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。</li>
</ul>
</li>
<li><p>常用的几个关键字</p>
<ul>
<li>params 可变参数  无论有几个参数，必须出现在参数列表的最后。可以为可变参数直接传递一个对应类型的数组。</li>
<li>ref 仅仅是一个地址，引用传递，可以把值传递强制改为引用传递<ul>
<li>参数在传递之前必须赋值</li>
<li>在方法中可以不为ref参数赋值，可以直接使用。</li>
</ul>
</li>
<li>out 让函数可以输出多个值<ul>
<li>在方法中必须为out参数赋值</li>
<li>out参数的变量在传递之前不需要赋值，即使赋值了也不能在方法中使用</li>
</ul>
</li>
</ul>
</li>
<li><p>关于类型转换</p>
<ul>
<li>对于值类型 由低精度到高精度转换叫隐式转换，高精度到低精度叫显示转换。</li>
<li>对于引用类型 由子类转换成父类隐式转换，父类到子类叫显示转换。</li>
<li>拆箱装箱只发生在具有继承关系的哪个类型关系之间，int转string没有装箱。</li>
</ul>
</li>
<li><p>垃圾回收</p>
<ul>
<li>垃圾回收的目的：提高内存利用率。</li>
<li>垃圾回收器，只回收托管堆中的内存资源，不回收其他资源（数据库连接、文件句柄、网络端口等）。</li>
<li>没有变量引用的对象才会被回收。</li>
<li>回收时间不确定，GC.Collect();//手动调用垃圾回收器</li>
</ul>
</li>
</ol>
<p>​     </p>
<p>​     </p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写入日志到mongodb]]></title>
      <url>/2019/04/25/mongo/</url>
      <content type="html"><![CDATA[<p>为什么要写入到mongodb中</p>
<ul>
<li>sqlite 单线程，多线程下存在安全问题，但是网站天生多线程。</li>
<li>mongodb并发性能更好。</li>
<li><strong>sqlite无法远程访问</strong>。</li>
<li>了解学习nosql中文档型数据库mongodb。</li>
</ul>
<p>实现步骤</p>
<ol>
<li><p>使用nuget下载MongoDB.Driver。</p>
</li>
<li><p>修改log4net的配置文件，mongodb的log4net配置文件放在下面，将原来的替换就行</p>
</li>
<li><p>配置文件注意项</p>
<p><img src="https://i.loli.net/2019/03/26/5c9980a957e4d.png" alt="1BFQQYCIL}H7SX{ZP24ZTO0.png"></p>
</li>
</ol>
<p>连接字符串的ip部署到服务器上要改成localhost，类似数据库的连接字符串。</p>
<p>collectionName节点中的值 最好自己定义不要和别人一样。如果一样相当于你们两个的数据写到同一张“表”里。</p>
<ol start="4">
<li>改完后测试一下 登入42.228.11.184:10094 看是否可以成功写入日志。</li>
<li>登录界面连接字符串就是配置文件中的字符串，连接名字随便起。</li>
<li><p>服务器上mongodb的环境已经配置好了，有兴趣可以在自己本地安装配置了解下。</p>
<p><img src="https://i.loli.net/2019/03/26/5c998768c8cd5.png" alt="BQ~T41~LUC9D3GJGO`ER4~L.png"></p>
</li>
</ol>
<p>mongodb配置文件</p>
<figure class="highlight xml"><figcaption><span><log4net></log4net></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">log4net</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"logsql"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"Info"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"MongoDBAppender"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"MongoDBAppender"</span> <span class="attr">type</span>=<span class="string">"Log4Mongo.MongoDBAppender, Log4Mongo"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">MongoDB database connection in the format:</span></span><br><span class="line"><span class="comment">mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</span></span><br><span class="line"><span class="comment">See http://www.mongodb.org/display/DOCS/Connections for connectionstring options </span></span><br><span class="line"><span class="comment">If no database specified, default to "log4net"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">connectionString</span> <span class="attr">value</span>=<span class="string">"mongodb://zhkj:admin@42..228.11.184:10092/first"</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Name of connectionString defined in web/app.config connectionStrings group, the format is the same as connectionString value.</span></span><br><span class="line"><span class="comment">Optional, If not provided will use connectionString value</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">connectionStringName</span> <span class="attr">value</span>=<span class="string">"mongo-log4net"</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">The Friendly Name of the certificate. This value will be used if SSL is set to true</span></span><br><span class="line"><span class="comment">The default StoreLocation is LocalMachine and StoreName is My</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">certificateFriendlyName</span> <span class="attr">value</span>=<span class="string">"Certificate Friendly Name"</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">If set, a TTL (Time To Live) index will be created on the Timestamp field.  </span></span><br><span class="line"><span class="comment">Records older than this value will be deleted.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">expireAfterSeconds</span> <span class="attr">value</span>=<span class="string">"3600"</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Name of the collection in database</span></span><br><span class="line"><span class="comment">Optional, Defaults to "logs"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">collectionName</span> <span class="attr">value</span>=<span class="string">"mylog"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Maximum size of newly created collection. Optional, Defaults to creating uncapped collections</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">newCollectionMaxSize</span> <span class="attr">value</span>=<span class="string">'65536'</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">newCollectionMaxDocs</span> <span class="attr">value</span>=<span class="string">'5000'</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- <span class="doctag">Note:</span> this needs to be "timestamp" and NOT "Timestamp"  for the TTL index to work --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span> <span class="attr">value</span>=<span class="string">"timestamp"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.RawTimeStampLayout"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span> <span class="attr">value</span>=<span class="string">"level"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span> <span class="attr">value</span>=<span class="string">"%level"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span> <span class="attr">value</span>=<span class="string">"thread"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span> <span class="attr">value</span>=<span class="string">"%thread"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span> <span class="attr">value</span>=<span class="string">"logger"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span> <span class="attr">value</span>=<span class="string">"%logger"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span> <span class="attr">value</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span> <span class="attr">value</span>=<span class="string">"%message"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span> <span class="attr">value</span>=<span class="string">"mycustomproperty"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.RawPropertyLayout"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">key</span> <span class="attr">value</span>=<span class="string">"mycustomproperty"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">log4net</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>mongodb一些练习命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db.auth("root","root123")</span><br><span class="line">mongo</span><br><span class="line">show users</span><br><span class="line">use admin</span><br><span class="line">db.first.insert(&#123;"name":"123"&#125;)</span><br><span class="line">db.createUser(&#123;user: "zhkj", pwd: "admin", roles: [&#123; role: "readWrite", db: "first" &#125;]&#125;)</span><br><span class="line"><span class="meta">#</span> 允许远程连接需要做的工作</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1,0.0.0.0</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure>
<p>[添加用户][<a href="https://www.cnblogs.com/jacksoft/p/6916137.html" target="_blank" rel="noopener">https://www.cnblogs.com/jacksoft/p/6916137.html</a></p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程lock 锁]]></title>
      <url>/2019/04/23/lock%E9%94%81/</url>
      <content type="html"><![CDATA[<h2 id="多线程lock-锁"><a href="#多线程lock-锁" class="headerlink" title="多线程lock 锁"></a>多线程lock 锁</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>编辑器中编写的c#语句多数不是<strong>原子操作</strong>，例如_count++看似只有一步，但其实是三条原子操作：</p>
<ol>
<li>从_count变量中把值取出来；</li>
<li>将取出来的值++；</li>
<li>再把新值赋值给_count变量</li>
</ol>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>保证同时只能有一个线程操作共享变量。</p>
<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>lock锁定的只能是引用类型。如果使用值类型，因为加锁解锁会装箱拆箱，造成锁定时的对象和解锁的对象不是同一个，所以不能用值类型。字符串虽然是引用类型，但是由于<em>拘留池</em>的问题，最好不要使用字符串。</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>类的内存空间里维护了一个<strong>同步索引块</strong>，可以理解为类的一个标记，当加上锁之后这个标记为1，当再有锁来请求的时候先进行判断，如果为1则继续进行等待。</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>资源A请求资源B，资源B请求请求A，两者相互等待。</p>
<p>解决方法是<strong>顺序访问</strong>：无论哪个线程想要执行这个任务，必须先访问资源A再访问资源B</p>
<p>[^附]: 控件.invoke() 将控制控件的线程回到主线程上去。</p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[resharper中的相关设置]]></title>
      <url>/2019/04/23/resharper%E4%B8%AD%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="resharper中的相关设置"><a href="#resharper中的相关设置" class="headerlink" title="resharper中的相关设置"></a>resharper中的相关设置</h2><blockquote>
<p><a href="https://www.cnblogs.com/Chary/p/No0000B0.html" target="_blank" rel="noopener">https://www.cnblogs.com/Chary/p/No0000B0.html</a>  使用介绍</p>
</blockquote>
<ol>
<li><p>关闭拼写检查(typo in string)</p>
<ul>
<li>需要点击 Resharper 选择 Option 在 <code>Code Inspection-&gt;inspection severity</code> 输入 <code>typo</code> 搜索 </li>
<li>参考网址 <a href="https://cloud.tencent.com/developer/article/1342913" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1342913</a></li>
</ul>
</li>
<li><p>关闭var提示</p>
<ul>
<li>需要点击 Resharper 选择 Option 在 <code>Code Inspection-&gt;inspection severity-&gt;code style</code> 输入 <code>var</code> 搜索</li>
<li>参考网址   <a href="https://www.cnblogs.com/matong/archive/2012/02/15/2353238.html" target="_blank" rel="noopener">https://www.cnblogs.com/matong/archive/2012/02/15/2353238.html</a></li>
</ul>
</li>
<li><p>关闭 localizable string提示</p>
<ul>
<li>需要点击 Resharper 选择 Option 在 输入 <code>localizable</code> 搜索</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git命令学习]]></title>
      <url>/2019/04/20/git%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="git命令学习"><a href="#git命令学习" class="headerlink" title="git命令学习"></a>git命令学习</h2><ol>
<li><p>设置机器名字和邮箱</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global user.name "Your Name"</span><br><span class="line"><span class="meta">$</span> git config --global user.email "email@example.com"</span><br><span class="line">------查看本机全局git配置-----------------</span><br><span class="line"><span class="meta">$</span> git config --list</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建版本库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git init</span><br></pre></td></tr></table></figure>
</li>
<li><p>向版本库添加文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add fileName</span><br><span class="line"><span class="meta">$</span> git commit -m "remark"</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示提交日志</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log --pretty=oneline</span><br><span class="line">--------------版本回退------------------</span><br><span class="line"><span class="meta">$</span> git reset --hard HEAD^(版本id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示<strong>工作区</strong>所做的更改</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git status</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git rm fileName</span><br><span class="line"><span class="meta">$</span> git commit -m "remark"</span><br><span class="line"></span><br><span class="line">-----误删除 从版本库中将文件恢复到工作区------</span><br><span class="line"><span class="meta">$</span> git checkout -- test.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>关联远程仓库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-----------关联远程仓库-------------</span><br><span class="line"><span class="meta">$</span> git remote add origin git@github.com:hyke123/demo.git</span><br><span class="line"></span><br><span class="line">-----------修改关联的远程仓库-------------</span><br><span class="line"><span class="meta">$</span> git remote set-url origin git@github.com:hyke123/first.git</span><br><span class="line">-----------推送到远程仓库-------------</span><br><span class="line"><span class="meta">$</span> git push -u origin master  (第一次全部推送)</span><br><span class="line"><span class="meta">$</span> git push origin master （往后推送简写）</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地克隆远程仓库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone git@github.com:hyke123/demo.git</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件操作常用相关类]]></title>
      <url>/2019/04/16/DotNet%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h3><ul>
<li><strong>File</strong>  //操作文件,静态类，对文件整体操作。拷贝、删除、剪切等。</li>
<li><strong>Directory</strong>  //操作目录（文件夹），静态类。</li>
<li><strong>DirectoryInfo</strong> //文件夹的一个“类”，用来描述一个文件夹对象（获取指定目录下的所有目录时返回一个DirectoryInfo数组。）</li>
<li><strong>FileInfo</strong>  //文件类，用来描述一个文件对象。获取指定目录下的所有文件时，返回一个FileInfo数组。</li>
<li><strong>Path</strong>  //对文件或目录的路径进行操作（很方便）</li>
<li><strong>Stream</strong> //文件流，抽象类<ul>
<li>FileStream //文件流,MemoryStream(内存流),NetworkStream(网络流)</li>
<li>StreamReader //快速读取文本文件</li>
<li>StreamWriter//快速写入文本文件</li>
</ul>
</li>
</ul>
<hr>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//Path部分</span><br><span class="line">string ChangeExtension(string path, string extension) ()</span><br><span class="line">修改文件的后缀，“修改”支持字符串层面的，没有真的给文件改名</span><br><span class="line">string s = Path.ChangeExtension(@&quot;C:\temp\F3.png&quot;, &quot;jpg&quot;)</span><br><span class="line">string Combine(string path1, string path2)</span><br><span class="line">将两个路径合成一个路径，比用+好，可以方便解决不加斜线的问题，自动处理路径分隔符的问题</span><br><span class="line">string s = Path.Combine(@&quot;c:\temp&quot;,&quot;a.jpg&quot;) </span><br><span class="line">string GetDirectoryName(string path) ()</span><br><span class="line">得到文件的路径名。Path.GetDirectoryName(@&quot;c:\temp\a.jpg&quot;)</span><br><span class="line">string GetExtension(string path) 得到文件的扩展名</span><br><span class="line">string GetFileName(string path) 得到文件路径的文件名部分</span><br><span class="line">string GetFileNameWithoutExtension(string path) 得到去除扩展名的文件名</span><br><span class="line">string GetFullPath(string path) 得到文件的全路径。可以根据相对路径获得绝对路径。</span><br><span class="line">string GetTempFileName()  得到一个唯一的临时文件名()</span><br><span class="line">string GetTempPath() 得到临时文件夹的路径()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//下面是关于Directory常用的函数，Flie类用法与其相似。 </span><br><span class="line">if (Directory.Exists(@&quot;c\hello&quot;))//判断文件夹是否存在</span><br><span class="line"> &#123;</span><br><span class="line">    Directory.CreateDirectory(@&quot;c\hello\a&quot;);//创建文件夹 可以递归创建</span><br><span class="line"> &#125;</span><br><span class="line"> Directory.Delete(@&quot;c\hello&quot;,true);//删除文件夹 设置为true才可以删除不空文件夹</span><br><span class="line"> var str= Directory.GetFiles(@&quot;c\hello&quot;);//返回改目录下子文件的路径 （不包含后代文件）</span><br><span class="line"> var strd = Directory.GetDirectories(@&quot;c\hello&quot;);//返回改目录下子文件的目录（不包含后代目录）</span><br><span class="line"> var assemblyPath=Assembly.GetExecutingAssembly().Location;//获取当前程序集路径</span><br><span class="line"> var endPath = System.IO.Path.GetDirectoryName(assemblyPath);</span><br><span class="line"> var myPath= Path.Combine(endPath, &quot;1.txt&quot;);</span><br><span class="line"> var path  =Directory.GetCurrentDirectory();//受OpenFileDialog函数的影响 拿到的路径可能不对</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// File类的常用静态方法：(FileInfo*)</span><br><span class="line">void AppendAllText(string path, string contents)，将文本contents附加到文件path中</span><br><span class="line">bool Exists(string path)判断文件path是否存在</span><br><span class="line">string[] ReadAllLines(string path) 读取文本文件到字符串数组中</span><br><span class="line">string ReadAllText(string path) 读取文本文件到字符串中</span><br><span class="line">void WriteAllText(string path, string contents)将文本contents保存到文件path中，会覆盖旧内容。</span><br><span class="line">WriteAllLines(string path,string[] contents)，将字符串数组逐行保存到文件path中，会覆盖旧内容。</span><br><span class="line">File.Copy(&quot;source&quot;, “targetFileName”, true);//文件拷贝,true表示当文件存在时“覆盖”，如果不加true,则文件存在报异常。</span><br><span class="line">File.Move(“source”, “target”);//移动（剪切），思考如何为文件重命名？文件的剪切是可以跨磁盘的。</span><br><span class="line">File.Delete(“path”);//删除。如果文件不存在？不存在，不报错</span><br><span class="line">File.Create(“path”);//创建文件</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vs附加到进程调试]]></title>
      <url>/2019/02/28/vs%E9%99%84%E5%8A%A0%E5%88%B0%E8%BF%9B%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<h3 id="vs附加到进程调试"><a href="#vs附加到进程调试" class="headerlink" title="vs附加到进程调试"></a>vs附加到进程调试</h3><blockquote>
<p>vs 在调试web程序时，修改代码然后重新启动过程较慢，可以采用附加到进程的方式快速启动调试。</p>
</blockquote>
<ul>
<li><p>将vs设置成管理员模式运行。 </p>
<p>右键vs的<strong>快捷方式</strong>，选择<strong>高级</strong>，在用管理员身份运行前<strong>打勾</strong></p>
</li>
<li><p>在本地电脑上安装IIS</p>
</li>
<li><p>将本地开发的项目部署到IIS上</p>
</li>
<li><p>在vs工具-拓展和更新中安装插件<strong>debug attach manager</strong></p>
</li>
<li><p>使用这个插件选择w3wp.exe进程。（也可以附加到iisexpress进程上，这样可以省掉装iis的步骤。）</p>
</li>
<li><p>在vs 工具-选项-调试下面取消打勾<strong>要求源文件与原始版本匹配</strong></p>
</li>
<li><p>在vs解决方案管理中,右键项目属性-web，勾选本地代码和启用编辑并继续</p>
</li>
<li><p>如果提示不能命中断点，在IIS上重新浏览下改项目即可。</p>
</li>
</ul>
<p><a href="https://www.cnblogs.com/ligenyun/p/7631874.html" target="_blank" rel="noopener">参考资料</a></p>
]]></content>
      
        <categories>
            
            <category> c# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> vs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用log4net将日志写入到sqlite中]]></title>
      <url>/2019/02/23/log4net%E5%86%99%E6%97%A5%E5%BF%97%E5%88%B0sqlite%E5%92%8Cmongodb/</url>
      <content type="html"><![CDATA[<h2 id="如何利用log4net将日志写入到sqlite中"><a href="#如何利用log4net将日志写入到sqlite中" class="headerlink" title="如何利用log4net将日志写入到sqlite中"></a>如何利用log4net将日志写入到sqlite中</h2><blockquote>
<p>用log4net写日志这个相对比较简单，网上也有很多相关文档教程，但大多数教程是将日志写在了文本文件中，一天一个日志文件。这样时间长了之后会有很多日志文件，并且<strong>很不利于我们分析日志</strong>。如果我们能将日志写到一个轻量级的数据库中，我们就可以利用sql预计来进行分析统计日志。</p>
</blockquote>
<h3 id="log4net"><a href="#log4net" class="headerlink" title="log4net"></a>log4net</h3><p>为什么要有日志，是因为我们程序一旦运行或者部署后我们就不能够进行断点调试获取运行信息，或者程序出错的时候我们想记录下来，那么这个时候就需要日志。log4net是一个从java移植过来的记录日志的框架组件。</p>
<p>Log4net强大的地方就是它的多目标输出，可以输出到控制台、文件、数据库、系统事件、Email等，几乎无所不能然后它可以通过配置让日志系统实时生效，比如说在服务运行的过程中修改配置改变输出目标，改变日志等级等，均不用重启程序。</p>
<p>至于log4net具体如何配置，我想对比较偷懒，一般都是在网上找一个差不多能符合自己需求的场景的配置文件，直接拿来用。具体的配置文档说明可以见<a href="https://blog.csdn.net/binnygoal/article/details/79557746" target="_blank" rel="noopener">log4net配置文档</a></p>
<h3 id="sqlite"><a href="#sqlite" class="headerlink" title="sqlite"></a>sqlite</h3><p>SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。—摘自官方解释:joy:</p>
<p>自己通俗一点理解：不用装数据库服务程序，使用过程中只有一个单独的文件，用来记录数据。读写速度也很高。</p>
<h3 id="在c-程序中使用"><a href="#在c-程序中使用" class="headerlink" title="在c#程序中使用"></a>在c#程序中使用</h3><ol>
<li><p>使用nuget下载system.data.sqlite,其中要注意的是<strong>下载的dll文件版本和log4net配置文件中的版本要一致</strong><br><img src="https://i.loli.net/2019/03/20/5c91de5a23dbb.png" alt="{A[_H2DE51~AOE13RUR59YH.png" title="{A[_H2DE51~AOE13RUR59YH.png"></p>
</li>
<li><p>配置log4net，配置文件在下面，可以直接复制到webconfig中，注意数据库路径和sqlite.dll版本号。数据库文件去这个链接拿。链接: <a href="https://pan.baidu.com/s/1G7gnqGkBgXMPAiLywh5UKA" target="_blank" rel="noopener">https://pan.baidu.com/s/1G7gnqGkBgXMPAiLywh5UKA</a> 提取码: smdb<br>  <img src="https://i.loli.net/2019/03/20/5c91dfa61046e.png" alt="6QN%_P38`H9T[Z8LZL5D54Q.png" title="6QN%_P38`H9T[Z8LZL5D54Q.png"></p>
</li>
<li><p>添加过滤器类MyLogAttribute继承自<strong>ActionFilterAttribute</strong>，详细代码在下面。</p>
</li>
<li><p>添加日志帮助类，封装对log4net的操作，详细代码在下面。</p>
</li>
<li><p>在全局文件Global.asax中注册log4net配置信息</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//配置log4net</span><br><span class="line">log4net.Config.XmlConfigurator.Configure(new System.IO.FileInfo(Server.MapPath(&quot;~/Web.config&quot;)));</span><br></pre></td></tr></table></figure>
</li>
<li><p>在app_start文件下的FilterConfig类中添加对过滤器MyLogAttribute的注册。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filters.Add(new MyLogAttribute());</span><br></pre></td></tr></table></figure>
</li>
<li><p>在程序中写入日志。</p>
</li>
</ol>
<h3 id="附log4net-配置文件"><a href="#附log4net-配置文件" class="headerlink" title="附log4net 配置文件"></a>附log4net 配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">log4net</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;root&gt;</span></span><br><span class="line"><span class="comment">     &lt;level value="ALL"&gt;&lt;/level&gt;</span></span><br><span class="line"><span class="comment">     &lt;appender-ref ref="sqlite"/&gt;</span></span><br><span class="line"><span class="comment">   &lt;/root&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"logsql"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"Info"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"sqlite"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"sqlite"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.AdoNetAppender"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bufferSize</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">connectionType</span> <span class="attr">value</span>=<span class="string">"System.Data.SQLite.SQLiteConnection, System.Data.SQLite, Version=1.0.109.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">connectionString</span> <span class="attr">value</span>=<span class="string">"data source=F:\gx\湖北项目源码最新\csprogram\02-空白系统框架\WindowsFormsDesktop\bin\MyLogs.db;Synchronous=Off"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">commandText</span> <span class="attr">value</span>=<span class="string">"INSERT INTO Log (Location, Level, Message, TimeStamp) VALUES (@Location, @Level, @Message, @TimeStamp)"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">"@Location"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">"String"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">"CHI"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">"@TimeStamp"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">"DateTime"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.RawTimeStampLayout"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">"@Level"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">"String"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">"%level"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">"@Message"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">"String"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">"%message"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">log4net</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class MyLogAttribute:ActionFilterAttribute</span><br><span class="line">   &#123;</span><br><span class="line">       public override void OnActionExecuted(ActionExecutedContext actionExecutedContext)</span><br><span class="line">       &#123;</span><br><span class="line">         base.OnActionExecuted(actionExecutedContext);</span><br><span class="line">           //获取action名称</span><br><span class="line">         var  actionName = actionExecutedContext.ActionDescriptor.ActionName;</span><br><span class="line">           //获取Controller 名称</span><br><span class="line">         var controllerName = actionExecutedContext.ActionDescriptor.ControllerDescriptor.ControllerName;</span><br><span class="line">         var queryString = actionExecutedContext.HttpContext.Request.QueryString.ToString();</span><br><span class="line">         var fromString = actionExecutedContext.HttpContext.Request.Form.ToString();</span><br><span class="line">         var code = actionExecutedContext.HttpContext.Response.StatusCode;</span><br><span class="line">         LogHelper.WriteLog($@&quot;访问&#123;controllerName&#125;/&#123;actionName&#125;|get参数:&#123;queryString&#125;|post参数:&#123; fromString&#125;|返回状态&#123;code&#125;&quot;);</span><br><span class="line">           #region</span><br><span class="line">           //var paramss= actionExecutedContext.ActionDescriptor.GetParameters();</span><br><span class="line">           //if (paramss.Length &gt; 0)</span><br><span class="line">           //  &#123;</span><br><span class="line">           //      var itemType = paramss[0].ParameterType;</span><br><span class="line">           //      PropertyInfo[] infos = itemType.GetProperties();</span><br><span class="line">           //      Dictionary&lt;string, string&gt; parmsObj = new Dictionary&lt;string, string&gt;();</span><br><span class="line">           //      foreach (PropertyInfo info in infos)</span><br><span class="line">           //      &#123;</span><br><span class="line">           //          if (info.CanRead)</span><br><span class="line">           //          &#123;</span><br><span class="line">           //              var propertyValue = actionExecutedContext.Controller.ValueProvider.GetValue(info.Name);// 暂不支持多层嵌套 后期优化?</span><br><span class="line">           //              if (!parmsObj.ContainsKey(info.Name))</span><br><span class="line">           //              &#123;</span><br><span class="line">           //                  parmsObj.Add(info.Name, null == propertyValue ? &quot;&quot; : propertyValue.AttemptedValue);</span><br><span class="line">           //              &#125;</span><br><span class="line">           //          &#125;</span><br><span class="line"></span><br><span class="line">           //      &#125;</span><br><span class="line">           //      string json = JsonConvert.SerializeObject(parmsObj);</span><br><span class="line">           //  &#125;</span><br><span class="line">           #endregion</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">public class LogHelper</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        private LogHelper()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static readonly log4net.ILog loginfo = log4net.LogManager.GetLogger(&quot;loginfo&quot;);</span><br><span class="line"></span><br><span class="line">        public static readonly log4net.ILog logerror = log4net.LogManager.GetLogger(&quot;logerror&quot;);</span><br><span class="line"></span><br><span class="line">        public static readonly log4net.ILog logdebug = log4net.LogManager.GetLogger(&quot;logdebug&quot;);</span><br><span class="line">        private static readonly ILog log = LogManager.GetLogger(&quot;logsql&quot;);</span><br><span class="line"></span><br><span class="line">        public static void AddFakeData()</span><br><span class="line">        &#123;</span><br><span class="line">            log.Error(&quot;Oh noes, you brokes teh interwebs!&quot;, new Exception(&quot;test&quot;));</span><br><span class="line">            log.Info(&quot;Something, something, dark side.&quot;);</span><br><span class="line">            log.Warn(&quot;It had a minor, hiccup. tee hee!&quot;);</span><br><span class="line">            log.Error(&quot;Oh noes, you brokes teh interwebs!&quot;);</span><br><span class="line">            log.Fatal(&quot;Crap! Someone really messed up this time. Some heads are going to roll!...or maybe just yours...&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void WriteLog(string info)</span><br><span class="line">        &#123;</span><br><span class="line">            if (log.IsInfoEnabled)</span><br><span class="line">            &#123;</span><br><span class="line">                log.Info(info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public static void WriteWarn(string info)</span><br><span class="line">        &#123;</span><br><span class="line">            if (log.IsWarnEnabled)</span><br><span class="line">            &#123;</span><br><span class="line">                log.Warn(info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public static void WriteError(string info)</span><br><span class="line">        &#123;</span><br><span class="line">            if (log.IsErrorEnabled)</span><br><span class="line">            &#123;</span><br><span class="line">                log.Error(info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public static void SetConfig()</span><br><span class="line">        &#123;</span><br><span class="line">            log4net.Config.XmlConfigurator.Configure();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void SetConfig(FileInfo configFile)</span><br><span class="line">        &#123;</span><br><span class="line">            log4net.Config.XmlConfigurator.Configure(configFile);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //public static void WriteDebugLog(string info)</span><br><span class="line">        //&#123;</span><br><span class="line">        //    if (logdebug.IsInfoEnabled)</span><br><span class="line">        //    &#123;</span><br><span class="line">        //        logdebug.Info(info);</span><br><span class="line">        //    &#125;</span><br><span class="line">        //&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //public static void WriteLog(string info, Exception se)</span><br><span class="line">        //&#123;</span><br><span class="line">        //    if (logerror.IsErrorEnabled)</span><br><span class="line">        //    &#123;</span><br><span class="line">        //        logerror.Error(info, se);</span><br><span class="line">        //    &#125;</span><br><span class="line">        //&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> c# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 日志 </tag>
            
            <tag> sqlite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[csharp 体系总结篇]]></title>
      <url>/2019/01/31/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="体系结构总结"><a href="#体系结构总结" class="headerlink" title="体系结构总结"></a>体系结构总结</h1><h2 id="netframewok"><a href="#netframewok" class="headerlink" title=".netframewok"></a>.netframewok</h2><blockquote>
<p>.netframewok 是微软推出的一套框架，里面包含CLR，BCL，FCL，CTS，CLS等，下面就从中摘出一部分解释一下。</p>
</blockquote>
<h3 id="c"><a href="#c" class="headerlink" title="c"></a>c</h3><p>c# 是一种.netframework上的一种编程语言，该平台上的开发语言还有vb,f#。目前大多数.net程序员用的开发语言为c#。要搞清楚<strong>c#</strong>和<strong>.net</strong>之间的关系。</p>
<h3 id="BCL"><a href="#BCL" class="headerlink" title="BCL"></a>BCL</h3><p>基础类库，封装了我们常用的一些框架内置类，比如我们常用List集合，File，DateTime等。</p>
<h3 id="CTS，CLS"><a href="#CTS，CLS" class="headerlink" title="CTS，CLS"></a>CTS，CLS</h3><p>指的是<strong>公共类型系统</strong> 和<strong>公共语言规范</strong> 简明理解就是语法和类型规范</p>
<h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><p>当使用支持.NET的编译器编译之后，生成.dll或.exe文件。这文件称作.NET程序集，包含IL（中间语言）和元数据。也就是我们写完的c#代码通过编译器编译之后并不是直接可以被操作系统执行，这种dll文件称为托管dll。</p>
<h3 id="运行时（clr）"><a href="#运行时（clr）" class="headerlink" title="运行时（clr）"></a>运行时（clr）</h3><p>当我们通过编译器编译之后生成的dll，需要在clr的环境里才能执行，即CLR的JIT负责将IL编译成机器码。 然后才能被操作系统执行。</p>
<h3 id="托管和非托管"><a href="#托管和非托管" class="headerlink" title="托管和非托管"></a>托管和非托管</h3><p>这个主要和c++编写的程序进行区别，当我们使用c#调用c++的dll文件时，要明白c++生产的dll文件是直接可以被操作系统执行即非托管，而c#生存的dll则依赖于<strong>运行时</strong> 即托管程序。</p>
<hr>
<blockquote>
<p>补充两张图 第一张是c#程序的执行过程，第二张各个版本之间及其的对应关系。</p>
</blockquote>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1548915896108.png" alt="1548915896108"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1548916045600.png" alt="1548916045600"></p>
<h2 id="c-语法"><a href="#c-语法" class="headerlink" title="c#语法"></a>c#语法</h2><blockquote>
<p>语法相对来说算是容易的一部分，c#是一种面向对象的语言，讲究封装，多态，继承。</p>
</blockquote>
<p>c# 版本一直也在不断地升级，不断有新的语法出来，下面是1.0版本之后的一些新语法，一些初级小白可能用的比较少的或者不太了解。</p>
<h3 id="委托事件"><a href="#委托事件" class="headerlink" title="委托事件"></a>委托事件</h3><p>是c#五大引用类型的其中之一，表示一组具有相同返回值类型，参数列表的方法引用-通俗理解指向函数的指针。</p>
<h4 id="委托和事件的区别"><a href="#委托和事件的区别" class="headerlink" title="委托和事件的区别"></a>委托和事件的区别</h4><p>1.委托是一种数据类型，而事件是委托这种数据类型的一个实例。</p>
<p>2.委托可以在类外部直接赋值调用，而事件不可以。</p>
<p>3.事件只能使用+=赋值，而事件不是。</p>
<h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>匿名方法</p>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h4><p>编译器编译后生成的二进制信息，是对程序集的描述。</p>
<p>反射可以在程序运行期间动态地创建类型的实例。应用场景体现在三个例子里：<strong>orm</strong> <strong>模型绑定</strong> <strong>aop</strong></p>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>泛型就是参数化了类型，把类型作为参数抽象出来，从而更好地实现代码的复用。最大的优点<strong>延迟声明</strong></p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>把内存对象转换为字节序列的过程称为序列化。</p>
<p>把字节序列恢复为对象的过程称为反序列化。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>是c#种的一种引用类型，用以将元数据或声明信息与代码(程序集、类型、方法、属性等)相关联。自己理解通过中括号的方式给c#程序附加一些额外的信息，从而在程序运行的时候通过反射获得这些添加的信息。</p>
<h3 id="拓展方法"><a href="#拓展方法" class="headerlink" title="拓展方法"></a>拓展方法</h3><p>在原有类型的基础上增加一个或多个方法，使用时不需要去修改或编译类型本身的代码。</p>
<p>使用方式在一个静态类里声明一个静态方法，第一个参数应该是this+该类型名称。</p>
<h3 id="IO操作"><a href="#IO操作" class="headerlink" title="IO操作"></a>IO操作</h3><p>利用.net类库操作io，主要是磁盘读写。</p>
<blockquote>
<p>最后提一下语法糖，c#提供了很多语法糖，让我们写的代码更加简洁，编译器可以识别这些语法糖，生成的中间语言都是一样的，效率也是一样的。</p>
</blockquote>
<hr>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><blockquote>
<p>数据库的使用很常见，主要说关系型数据库和非关系型数据库，关系型简单点理解通常都是我们那种二维的表，而非关系的数据存储的数据基本上是以键值对的形式存储的。</p>
</blockquote>
<h3 id="关系型"><a href="#关系型" class="headerlink" title="关系型"></a>关系型</h3><p>关系型数据库主要有sqlserver,mysql，oracle。平时工作主要用的是微软家的sqlserver。</p>
<h3 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h3><p>not only sql这种数据库主要指的是内存型数据，数据都存储在内存中，可以高速的进行读写操作，所以在一些高并发或者需要缓存处理的场景种还是比较适用的。说几种常用的数据库，redis memcached monodb 这个东西在自己的开发工作种用的较少，因为自己做的项目很少需要这个场景。</p>
<h3 id="ado-net"><a href="#ado-net" class="headerlink" title="ado.net"></a>ado.net</h3><p>微软推出的.net程序访问数据库的技术，也是最高效读写数据库的方式，下面主要说几个里面比较重要的类。</p>
<h4 id="1-sqlconnection"><a href="#1-sqlconnection" class="headerlink" title="1. sqlconnection"></a>1. sqlconnection</h4><p>数据库连接对象，通过给这个对象传入连接参数进行连接数据库。</p>
<h4 id="2-sqlcommond"><a href="#2-sqlcommond" class="headerlink" title="2. sqlcommond"></a>2. sqlcommond</h4><p>主要通过这个对象传入要执行的sql语句。</p>
<h4 id="3-sqladapter"><a href="#3-sqladapter" class="headerlink" title="3. sqladapter"></a>3. sqladapter</h4><p>数据适配器，通过这个对象来给daset填充数据。</p>
<h4 id="4-datareader"><a href="#4-datareader" class="headerlink" title="4. datareader"></a>4. datareader</h4><p>数据读取器，我们可以理解为一个游标可以一行一行地读取数据库种的数据。</p>
<h3 id="orm"><a href="#orm" class="headerlink" title="orm"></a>orm</h3><p>有了ado.net我们虽然可以访问数据库，但是实现起来相对笔记繁琐，为了更加地面向对象，有了orm这个概念，我们将数据库种的关系模型映射成我们c#里面的类，通过对类操作来实现增删改查，相对起来开发效率较高，但是运行效率会稍有下降。orm的框架有很多，下面举几个例子：</p>
<h4 id="1-ef"><a href="#1-ef" class="headerlink" title="1. ef"></a>1. ef</h4><p>微软推出的，相对比较笨重，也有很多人质疑其性能（确实有点慢），好的一点是用的人多，相关资料多一点，想要提高其性能，需要对其有比较深入的研究。</p>
<h4 id="2-dapper"><a href="#2-dapper" class="headerlink" title="2. dapper"></a>2. dapper</h4><p>这个东西能有点orm的思想，但同时可以直接执行sql语句，在工作中没有用过原声的。用过其拓展dapper的组件。</p>
<h4 id="3-sqlsugar"><a href="#3-sqlsugar" class="headerlink" title="3. sqlsugar"></a>3. sqlsugar</h4><p>这个是国产的orm框架。没有在正式的项目种使用过，但是平常有照着文档编写一些demo，感觉挺好用的，效率也可以。还是比较推荐用这个框架的。</p>
<h3 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h3><p>这个就是作为一个程序员的基本功了，具体例子就先不写了。</p>
<h4 id="单表增删改查"><a href="#单表增删改查" class="headerlink" title="单表增删改查"></a>单表增删改查</h4><h4 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h4><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>​    当数据量比较大的时候查找比较耗时，我们可以在某一列上建立索引。好比建立一个字典的目录，这样查找起来就会快很多。（其实从上大学讲数据库开始，感觉自己就没有完全理解这个概念，工作中用的也较少，还是有点蒙（苦笑脸））</p>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>存储过程这个应该用的也比较多。是为了完成特定功能的sql语句组合，执行效率较高。不好的一点是不方便开发人员维护。</p>
<h3 id="linq"><a href="#linq" class="headerlink" title="linq"></a>linq</h3><p>微软推出的一种类似sql的查询技术，可以对c#种强类型对象进行相关操作，这一块比较难懂的就是ienumerable接口，里面有一个延迟查询，延迟查询是怎么通过迭代器模式实现的，这一块自己还是没有完全弄懂。</p>
<h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>读写分离理解起来也比较简单，就是多台数据库服务器，一部分负责<em>被读</em>，一部分负责<em>被写</em> 然后这些数据库再通过一些同步机制进行数据同步。这样就降低数据库的被访问压力。</p>
<h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><p>当一些数据日积月累量比较大的时候，我们通常会将数据库进行分割，垂直分割主要是将一些不同模块的表分到不同的数据库中，而垂直分割则是对同一张表的数据进行分割到不同的表里（比方表里的一些很久之前的历史数据很少会用到）。这样做为了提高访问数据库的速度。</p>
<blockquote>
<p>上面提高的读写分离，分库分表基本都是在数据库系统比较庞大数据量比较大的时候才会去使用。自己在工作中几乎没有遇到过这样的场景，很少去实践，所以并是很了解其中的细节，只是知道概念性东西。</p>
</blockquote>
<h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><blockquote>
<p>通信涉及很多方面，比方计算机和计算机之间的数据交换，或者同一个计算机内不通程序之间的数据交换，都可以称之为通信。</p>
</blockquote>
<h3 id="网口通信"><a href="#网口通信" class="headerlink" title="网口通信"></a>网口通信</h3><p>也就是我们通常说的网络通信，涉及的通信协议主要是tcp/ip和http，我们需要一些基础的知识，比方说ip，端口，进程等。</p>
<h4 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h4><p>使用socket较多的是桌面端应用程序，基本会和硬件进行对接通信，在开发这种项目的时候我建议大家还是使用一些第三发比较成熟的网络通信的框架，在这里推荐<strong>newlife.net</strong> 和<strong>supersocket</strong> 。第三方库封装的比较完善，我们只需要关心我们收到数据后怎么处理就行，只关注到我们的业务逻辑，至于其他的底层是怎么创建一个服务，怎么开启监听，监听队列设置多大，到底是多线程轮询还是异步通知交给框架来做，我们只需根据自己的场景选择适用的框架。（不建议大家从头使用socket编程的原因是这个东西相对非常复杂，并发以及稳定性不好控制，除非你自己封装的框架经过大量使用测试，保证其稳定性，否则不建议直接在正式项目种使用）。</p>
<p>下面再说一下在通信种经常遇到的几个问题</p>
<h5 id="1-粘包"><a href="#1-粘包" class="headerlink" title="1. 粘包"></a>1. 粘包</h5><p>出现这种原因主要是接收速度小于了发送速度，接收对数据没有及时处理造成的，解决方法有很多，我们需要对传输的数据进行<em>协议约定</em>， 常见的有帧固定长度，加上开始结束标记等。编写程序的时候在缓冲区按照协议进行处理即可。（建议使用框架自带粘包功能进行处理）</p>
<h5 id="2-心跳"><a href="#2-心跳" class="headerlink" title="2. 心跳"></a>2. 心跳</h5><p>心跳主要是为了保持连接，当客户端和服务端之间长时间不通信（windows貌似是2小时），服务端会为了减少资源的占用，从而断开这个连接。心跳是指开启一个线程然后定时的由一段向另一端发送消息。至于心跳是客户端向服务端发送，还是服务端向客户端发送，还是两者都要发送，这个我自己的理解是根据项目场景来定（苦笑脸）</p>
<h5 id="3-客户端断线重连"><a href="#3-客户端断线重连" class="headerlink" title="3. 客户端断线重连"></a>3. 客户端断线重连</h5><p>因为影响网络稳定性的因素有很多，所以我们的客户端通常要做断线重连功能，第一种是不拔调网线也就是物理链路没问题的情况下，断开连接的时候服务端是会收到一条消息或者抛出一个异常，这个时候一般可以通过框架自带的断线事件进行捕捉然后重连；第二种是拔掉网线这种物理链路断开的，这个时候服务端是检测不到的，我们只能通过心跳来进行实现，当我们默认时间内收不到服务端消息时则进行重连。</p>
<h4 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h4><p>现在互联网产业异常繁华，市场上做web开发的很多，其中java占了很大的份额，c#占的比重较小。大部分web开发归根揭底都是在用http。所以我们需要熟悉http，这样才能在程序出错的时候排查出问题所在。（锅到底是前端背还是后端背）😂</p>
<h5 id="1-报文格式"><a href="#1-报文格式" class="headerlink" title="1. 报文格式"></a>1. 报文格式</h5><p>http的报文格式主要是由请求头，请求行，以及请求数据组成，至于各个部分都有哪些字段，分别代表什么意思 大家可以分析报文的时候自行百度。</p>
<h5 id="2-get方法和post方法"><a href="#2-get方法和post方法" class="headerlink" title="2. get方法和post方法"></a>2. get方法和post方法</h5><p>get方法一般指参数在请求头里面，这些参数是明文的并且长度也有限制，而post方法是将参数放置到请求体，相对比较安全，在开发的时候建议大家使用post方法。</p>
<h5 id="3-状态码"><a href="#3-状态码" class="headerlink" title="3. 状态码"></a>3. 状态码</h5><p>我们需要知道一些常见的状态码代表的含义404 未找到 500服务器内部错误 200正常返回 等。</p>
<h5 id="4-chrome-调试"><a href="#4-chrome-调试" class="headerlink" title="4. chrome 调试"></a>4. chrome 调试</h5><p>要会使用F12调试，包括查看报文调试js，虽然应该是前端干的活，但是后端这都不会的话又该怎么和前端撕（苦笑脸）</p>
<h3 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h3><p>这个感觉没啥说的，自己也没有遇到过特别复杂的场景，使用framework自带的串口类库即可解决。</p>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>最后提一下进程间通信，因为这个实现的方式比较多，可以直接用socket，也可以用消息队列，数据库，管道这些东西。其中管道实现只是听过，从来没有去尝试用过（苦笑脸）</p>
<hr>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><blockquote>
<p>其实这一块涉及的东西很多，因为自己工作以来对这个接触的时间比较长，mvc也是现在比较流行的框架，相关的组件和资料都比较多。</p>
</blockquote>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>刚开始学mvc的时候并不太理解路由的概念，后来逐渐理解了，就是我们在访问不通页面的时候是如何进行跳转的，这个跳转的约定规则我们可以称之为路由。在mvc框架中除了使用区域的时候会改动一下路由，其他时候基本都是使用框架默认路由，能看懂框架那个默认的路由代表的含义即可。还有就是要学会通过route特性来自定义路由。</p>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过滤器是面向切面编程的产物，我们比较喜欢把http协议的处理过程看作是一条流水线，我们可以在其中的一个环节加上一道工序对http进行处理，那这道工序就是俗称的<strong>过滤器</strong>。mvc内置的过滤器有验证过滤器，授权过滤器，action过滤器，result过滤器，以及一个全局的异常处理过滤器。通常和过滤器配合我们来完成权限处理和系统的异常处理。</p>
<h3 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h3><p>其实也很简单，就是把系统再分模块，每个模块又是一个mvc的框架机制。</p>
<h3 id="razor"><a href="#razor" class="headerlink" title="razor"></a>razor</h3><p>刚开始学mvc的时候接触过，可以c#代码和前台代码混写，貌似看着很牛逼，但在现在<strong>大前端</strong>的发展趋势下，更流行的方案是前后台分离，这样混着写就算不上分离了。在平时的开发工作中，我们后台虽然是mvc框架，但是我们只提供数据接口，只返回数据，前台通过ajax调用，前端后端都是自己写（苦笑脸）所以现在razor这个东西也忘得差不多了（苦笑脸）</p>
<h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>说到这还是提下前端吧，工作中做的都是这种后台管理系统，所以我最开始的时候用的bootstrap+jquery，后来3大框架热了起来，自己也了解了下vue.js，觉得这玩意很牛逼，可以做双向绑定，再不用jq去获取dom了，所以把框架改成了基于vue的elementui，因为我自己只是学了vue.js的前面基础部分，没有学会组件后面的内容，所以往后的什么es6 webpack node.js自己都没有弄懂，可能是使用方式不对，这样整个系统就卡顿，所以后来就又换成了号称<strong>返璞归真</strong>的layui。这个东西虽然没有饿了么的ui好看，但是功能上基本上也能满足我们的需求。直到现在算是稳定下来了，我们是直接讲layui部署到了iis上。所谓的前后端分离就是<strong>前端部署到服务器一套，后台部署一套，不是像之前的放到一起部署</strong></p>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>前后台分离以一定会产生的问题就是这个，至于什么是跨域，大家自行百度吧。解决方式有很多，什么jsonp，nginx,通过后台设置请求头。业界用的比较多并且比较推荐的应该是nginx，自己也尝试配置过，但是没有成功，所以我们是直接在后台设置允许跨域访问的。</p>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>除了mvc提供的内置功能外，我们还需要一些第三方组件来辅助我们完成一些常用的功能，下面说了集中常用的组价，使用方式和代码有时间我加上去。</p>
<h4 id="log4net"><a href="#log4net" class="headerlink" title="log4net"></a>log4net</h4><p>日志组件</p>
<h4 id="quartz-net"><a href="#quartz-net" class="headerlink" title="quartz.net"></a>quartz.net</h4><p>定时任务组件</p>
<h4 id="autofac"><a href="#autofac" class="headerlink" title="autofac"></a>autofac</h4><p>依赖注入组件</p>
<h4 id="automapper"><a href="#automapper" class="headerlink" title="automapper"></a>automapper</h4><p>类映射组件</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>这里还有一些涉及思想和概念，比方说aop-面向切面编程，ioc-依赖注入面向接口编程。</p>
<h3 id="core"><a href="#core" class="headerlink" title="core"></a>core</h3><p>微软推出的跨平台框架，对基础类库进行了重写，运行效率也提高了，主要理解下core mvc中的管道模型，自己在前段时间写了一个core的简易权限框架，但是还没在实际项目中用过，有些知识点还不是特别熟悉，其中需要几个基础知识<strong>依赖注入</strong> <strong>中间件</strong> <strong>拓展方法</strong>。</p>
<h3 id="权限5张表"><a href="#权限5张表" class="headerlink" title="权限5张表"></a>权限5张表</h3><p>用户表 角色表 权限表 用户角色表 角色权限表</p>
<h2 id="异步多线程"><a href="#异步多线程" class="headerlink" title="异步多线程"></a>异步多线程</h2><blockquote>
<p>比较难的一大块，难在于这个东西不好控制。我们要理解下异步和多线程之间的关系，异步是目的，多线程是实现这个目的的一种方式。</p>
</blockquote>
<h3 id="eap-apm-tpl"><a href="#eap-apm-tpl" class="headerlink" title="eap  apm tpl"></a>eap  apm tpl</h3><p>这是微软推出的异步编程的3种类型的库，推出的时间也是按照上面的顺序，各有各的特点，时代都是向前发展的，所以目前我自己用的都是tpl类型的库。其他两种库自己认为能看懂代码即可，平时编程的时候还是用最新的好一点。</p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>因为创建线程和销毁线程都是有额外的资源开销的，所以系统会内置这样一个<strong>池子</strong> ，里面有若干已经创建好的线程，我们使用的时候直接从里面拿，用完后还会回到原来的池子里。</p>
<h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>回调其实也比较好理解，当我异步的去执行一个任务的时候，当执行的这个任务完成之后要做的事情，我们通常会将其放到一个回调函数里面。举个典型的例子就是ajax。</p>
<h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>对应于tpl里的task，也是开启一个线程去执行一段代码，但是我们可以通过task对这个任务进行有效的控制，比方说task.wait()。因为相对于普通的线程，他返回给我们的是执行线程的状态。</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>既然是多线程肯定会产生这个问题，当我们两个或者多个线程对同一个变量进行读写的时候，可能会出现数据不一致的问题，因为我们代码里面对变量的操作几乎都不是<strong>原子性</strong>的，可能线程1获取到变量的值，当他要给这个变量赋值的时候，cpu切换到了线程2，当线程1再给变量赋值的时候，这个变量已经不是当时的变量了，他可能被线程2给修改过。解决方法一般是加锁，当拿到锁对象的时候，这个变量只允许当前线程访问。还有我们也可以通过线程安全集合，这个c#内置的也有。自己在工作中一般还是加锁。</p>
<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量多用于线程之间的调度，当我们线程阻塞的时候</p>
<h2 id="管道模型"><a href="#管道模型" class="headerlink" title="管道模型"></a>管道模型</h2><blockquote>
<p>管道模型asp.net和.net core是有点不一样的，下面先只说asp.net的管道模型。</p>
</blockquote>
<p>是asp.net在处理http请求的一系列流程处理。首先http.sys服务监听所有http请求，收到请求后交给IIS种的<strong>isapi</strong>进行处理，isapi根据后缀进行处理；分为两种一种是静态文件直接返回给客户端，另一种是动态的需要程序进行处理，比方所有的aspx页面都由<strong>aspnet_isapi.dll</strong>进行处理。</p>
<h3 id="HttpApplication"><a href="#HttpApplication" class="headerlink" title="HttpApplication"></a>HttpApplication</h3><h3 id="HttpModule"><a href="#HttpModule" class="headerlink" title="HttpModule"></a>HttpModule</h3><h3 id="HttpHandler"><a href="#HttpHandler" class="headerlink" title="HttpHandler"></a>HttpHandler</h3><h3 id="HttpContext"><a href="#HttpContext" class="headerlink" title="HttpContext"></a>HttpContext</h3><h3 id="iis6和7的区别"><a href="#iis6和7的区别" class="headerlink" title="iis6和7的区别"></a>iis6和7的区别</h3><h3 id="应用程序池"><a href="#应用程序池" class="headerlink" title="应用程序池"></a>应用程序池</h3><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><blockquote>
<p>加密很常见，下面主要说几种常见的加密算法，具体实现细节可以不去深究，明白这种加密算法可以实现社么效果，会调用即可。</p>
</blockquote>
<h3 id="MD5不可逆"><a href="#MD5不可逆" class="headerlink" title="MD5不可逆"></a>MD5不可逆</h3><h3 id="DES对称性加密"><a href="#DES对称性加密" class="headerlink" title="DES对称性加密"></a>DES对称性加密</h3><h3 id="RSA非对称性加密"><a href="#RSA非对称性加密" class="headerlink" title="RSA非对称性加密"></a>RSA非对称性加密</h3><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><hr>
<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h3><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><h3 id="liveload"><a href="#liveload" class="headerlink" title="liveload"></a>liveload</h3><h3 id="resharper"><a href="#resharper" class="headerlink" title="resharper"></a>resharper</h3><h3 id="svn-git"><a href="#svn-git" class="headerlink" title="svn git"></a>svn git</h3><h3 id="通信助手"><a href="#通信助手" class="headerlink" title="通信助手"></a>通信助手</h3><h3 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h3><h3 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h3><h2 id="框架术语"><a href="#框架术语" class="headerlink" title="框架术语"></a>框架术语</h2><h3 id="soa-面向服务架构"><a href="#soa-面向服务架构" class="headerlink" title="soa 面向服务架构"></a>soa 面向服务架构</h3><h3 id="sop"><a href="#sop" class="headerlink" title="sop"></a>sop</h3><h3 id="oop"><a href="#oop" class="headerlink" title="oop"></a>oop</h3><h3 id="wcf"><a href="#wcf" class="headerlink" title="wcf"></a>wcf</h3><h3 id="webapi"><a href="#webapi" class="headerlink" title="webapi"></a>webapi</h3><h3 id="webservice"><a href="#webservice" class="headerlink" title="webservice"></a>webservice</h3><h2 id="MS框架"><a href="#MS框架" class="headerlink" title="MS框架"></a>MS框架</h2><h3 id="winform"><a href="#winform" class="headerlink" title="winform"></a>winform</h3><h3 id="wpf"><a href="#wpf" class="headerlink" title="wpf"></a>wpf</h3><h3 id="webform"><a href="#webform" class="headerlink" title="webform"></a>webform</h3><h4 id="一般处理程序"><a href="#一般处理程序" class="headerlink" title="一般处理程序"></a>一般处理程序</h4><h4 id="web窗体"><a href="#web窗体" class="headerlink" title="web窗体"></a>web窗体</h4><h3 id="asp-mvc"><a href="#asp-mvc" class="headerlink" title="asp.mvc"></a>asp.mvc</h3>]]></content>
      
        <categories>
            
            <category> c# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js 截取，循环的一些代码]]></title>
      <url>/2018/06/22/js%E6%88%AA%E5%8F%96%EF%BC%8C%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>平时在写前端js代码时基本的语句还可以写，但是有时候需要用到一些函数有些不熟练的就需要到网上查找，今天总结了一下，写了一点。</p>
</blockquote>
<h4 id="关于截取字符串和数组的一些代码"><a href="#关于截取字符串和数组的一些代码" class="headerlink" title="关于截取字符串和数组的一些代码"></a>关于截取字符串和数组的一些代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">//----------slice--------splice------------split---------substr------//</span></span><br><span class="line">      <span class="keyword">var</span> arr = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>];</span><br><span class="line">      <span class="comment">//从下标为1的位置取3-1个元素，返回一个新数组</span></span><br><span class="line">      <span class="keyword">var</span> arr1 = arr.slice(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">//输出2，3</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> arr2 = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>];</span><br><span class="line">      <span class="comment">//从下标为1的位置取2个元素，返回删除后的数组</span></span><br><span class="line">      <span class="keyword">var</span> arr3 = arr2.splice(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//输出2,3原数组为1,4</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//分割字符串</span></span><br><span class="line">      <span class="keyword">var</span> str = <span class="string">"1|2|3|4"</span>;</span><br><span class="line">      <span class="keyword">var</span> strarr = str.split(<span class="string">'|'</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//截取字符串</span></span><br><span class="line">      <span class="keyword">var</span> str2=<span class="string">"1234"</span>;</span><br><span class="line">      <span class="comment">//从下标为0的元素开始截取1个元素</span></span><br><span class="line">      <span class="keyword">var</span> str3=str2.substr(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//输出为1</span></span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="关于循环遍历的一些代码"><a href="#关于循环遍历的一些代码" class="headerlink" title="关于循环遍历的一些代码"></a>关于循环遍历的一些代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//用jquery遍历普通数组</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>];</span><br><span class="line">    $.each(arr, <span class="function"><span class="keyword">function</span> (<span class="params">index, value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//alert(index+value);//index是下标 value是对应下标的值</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用jquery和for in 遍历json对象</span></span><br><span class="line">    <span class="keyword">var</span> arr2 = &#123; <span class="attr">FirstName</span>: <span class="string">"Chris"</span>, <span class="attr">LastName</span>: <span class="string">"Pearson"</span> &#125;;</span><br><span class="line">    $.each(arr2, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// alert(key+value);</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> arr2) &#123;</span><br><span class="line">        <span class="comment">//alert(key + arr2[key]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历json对象数组</span></span><br><span class="line">    <span class="keyword">var</span> myList = [</span><br><span class="line">        &#123; <span class="attr">FirstName</span>: <span class="string">"Chris"</span>, <span class="attr">LastName</span>: <span class="string">"Pearson"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">FirstName</span>: <span class="string">"Kate"</span>, <span class="attr">LastName</span>: <span class="string">"Johnson"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">FirstName</span>: <span class="string">"Josh"</span>, <span class="attr">LastName</span>: <span class="string">"Sutherland"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">FirstName</span>: <span class="string">"John"</span>, <span class="attr">LastName</span>: <span class="string">"Ronald"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">FirstName</span>: <span class="string">"Steve"</span>, <span class="attr">LastName</span>: <span class="string">"Pinkerton"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">        $.each(myList[i], <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//    alert(key+value);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="半个神器jslinq"><a href="#半个神器jslinq" class="headerlink" title="半个神器jslinq"></a>半个神器jslinq</h4><blockquote>
<p>写法非常类似c#中linq 但是函数命名规则和c#一样，写在前台稍有点别扭，关键是没有智能提示，所以肯定没有在后台写着酸爽，并且里面那个箭头函数是es6的语法，浏览器支持也是一个问题。但是实现功能时基本没什么问题的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">//神器 jslinq</span></span><br><span class="line">  <span class="keyword">var</span> myList2 = [</span><br><span class="line">           &#123;<span class="attr">FirstName</span>:<span class="string">"Chris"</span>,<span class="attr">LastName</span>:<span class="string">"Pearson"</span>&#125;,</span><br><span class="line">           &#123;<span class="attr">FirstName</span>:<span class="string">"Kate"</span>,<span class="attr">LastName</span>:<span class="string">"Johnson"</span>&#125;,</span><br><span class="line">           &#123;<span class="attr">FirstName</span>:<span class="string">"Josh"</span>,<span class="attr">LastName</span>:<span class="string">"Sutherland"</span>&#125;,</span><br><span class="line">           &#123;<span class="attr">FirstName</span>:<span class="string">"John"</span>,<span class="attr">LastName</span>:<span class="string">"Ronald"</span>&#125;,</span><br><span class="line">           &#123;<span class="attr">FirstName</span>:<span class="string">"Steve"</span>,<span class="attr">LastName</span>:<span class="string">"Pinkerton"</span>&#125;</span><br><span class="line">           ];</span><br><span class="line">           <span class="keyword">var</span> arrRes0 = $.Enumerable.From(myList2).Select(<span class="function"><span class="params">x</span>=&gt;</span>x.FirstName).ToArray();</span><br><span class="line">           <span class="keyword">var</span> arrRes00 = $.Enumerable.From(myList2).FirstOrDefault(<span class="function"><span class="params">x</span>=&gt;</span>x.LastName==<span class="string">"Pinkerton"</span>);</span><br><span class="line">           <span class="keyword">var</span> arrRes = $.Enumerable.From(myList2).Select(<span class="string">"x=&gt;x.FirstName"</span>).ToArray();</span><br><span class="line">           <span class="keyword">var</span> arrRes2 = $.Enumerable.From(myList2).FirstOrDefault(<span class="string">"x=&gt;x.FirstName=='Chris'"</span>);</span><br><span class="line">           <span class="keyword">var</span> arrRes3 = $.Enumerable.From(myList2).Select(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> &#123;<span class="attr">name</span>:item.FirstName,<span class="attr">age</span>:item.LastName&#125; &#125;).ToArray();</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用反射、泛型处理表单—实体类—关系表之间的转换]]></title>
      <url>/2018/06/21/csharp%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%9B%E5%9E%8B%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E2%80%94%E5%AE%9E%E4%BD%93%E7%B1%BB%E2%80%94%E5%85%B3%E7%B3%BB%E8%A1%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>自己理解xx管理系统开发的一般流程都是建表，然后在前台界面上显示出表数据，做相关操作提交到后台更新表，这中间会有一些数据类型转换，关系表映射成实体类，实体类转换成json，然后再反过来走一遍。在开发的过程中如果能根据需求自己通过反射来转换类型，会提高我们的开发效率。</p>
<p>自己没有看过一些orm框架的源码，但是这个思路应该和下面说的差不多。</p>
</blockquote>
<h4 id="Nullable-lt-gt-的处理"><a href="#Nullable-lt-gt-的处理" class="headerlink" title="Nullable&lt;&gt;的处理"></a>Nullable&lt;&gt;的处理</h4><p>在转换的过程中我们会遇到一些出现<strong>空值</strong>的情况，我们在实体类声明的时候一般会把属性设置成可空类型，比方说Nullable<int>或者int?，假如我们使用Convert.ChangeType()将从关系表中的object类型直接转成Nullable&lt;&gt;的会报错，所以我们需要对其进行处理转换，详细代码如下：</int></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">  /// 类型转换（包含Nullable&lt;&gt;和非Nullable&lt;&gt;转换）</span><br><span class="line">  /// &lt;/summary&gt;</span><br><span class="line">  /// &lt;param name=&quot;value&quot;&gt;需要转换的值&lt;/param&gt;</span><br><span class="line">  /// &lt;param name=&quot;conversionType&quot;&gt;需要转换成的类型&lt;/param&gt;</span><br><span class="line">  /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">  private static object ChangeType(object value, Type conversionType)</span><br><span class="line">  &#123;</span><br><span class="line">      //如果要转换成的类型为空，是没有意义的直接抛出异常</span><br><span class="line">      if (conversionType == null)</span><br><span class="line">      &#123;</span><br><span class="line">          throw new ArgumentNullException(&quot;conversionType&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">//如果要转换成的类型是一个泛型类并且这个泛型类是Nullable&lt;&gt;</span><br><span class="line">      if (conversionType.IsGenericType &amp;&amp;</span><br><span class="line">          conversionType.GetGenericTypeDefinition().Equals(typeof(Nullable&lt;&gt;)))</span><br><span class="line">      &#123;</span><br><span class="line">          //如果需要转换的值是空的话 直接返回空即可</span><br><span class="line">          if (value == null)</span><br><span class="line">          &#123;</span><br><span class="line">              return null;</span><br><span class="line">          &#125; </span><br><span class="line">          //取出要转换的Nullable&lt;&gt;里的基础类型--即括号里面声明的类型</span><br><span class="line">          System.ComponentModel.NullableConverter nullableConverter = new System.ComponentModel.NullableConverter(conversionType);</span><br><span class="line">          conversionType = nullableConverter.UnderlyingType;</span><br><span class="line">      &#125;</span><br><span class="line">      //将需要转换的值转换成对应的类型</span><br><span class="line">      return Convert.ChangeType(value, conversionType);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="DTO类型直接转换"><a href="#DTO类型直接转换" class="headerlink" title="DTO类型直接转换"></a>DTO类型直接转换</h4><p>接下来就是具体的类型转换了，这里以DataTable转换成List<t>为列 下面是源码：</t></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">     ///  DataTable转换成List&lt;T&gt;</span><br><span class="line">     /// &lt;/summary&gt;</span><br><span class="line">     /// &lt;typeparam name=&quot;T&quot;&gt;实体类型&lt;/typeparam&gt;</span><br><span class="line">     /// &lt;param name=&quot;table&quot;&gt;需转换的数据table&lt;/param&gt;</span><br><span class="line">     /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">     public  List&lt;T&gt; ToModelList&lt;T&gt;(DataTable table) where T : new()</span><br><span class="line">     &#123;</span><br><span class="line">         List&lt;T&gt; entities = new List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">         foreach (DataRow row in table.Rows)</span><br><span class="line">         &#123;</span><br><span class="line">             //创建一个实体</span><br><span class="line">             T entity = new T();</span><br><span class="line">             //反射获取实体的所有属性</span><br><span class="line">             foreach (var item in entity.GetType().GetProperties())</span><br><span class="line">             &#123;</span><br><span class="line">                 if (row.Table.Columns.Contains(item.Name))</span><br><span class="line">                 &#123;</span><br><span class="line">                     //如果从数据库中取出的值不是dbnull</span><br><span class="line">                     if (DBNull.Value != row[item.Name])</span><br><span class="line">                     &#123;</span><br><span class="line">                        // 赋值</span><br><span class="line">                         item.SetValue(entity, ChangeType(row[item.Name], item.PropertyType), null);</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             entities.Add(entity);</span><br><span class="line">         &#125;</span><br><span class="line">         return entities;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<h4 id="反射的常用代码"><a href="#反射的常用代码" class="headerlink" title="反射的常用代码"></a>反射的常用代码</h4><p>之前好像写(fu)过(zhi)过一篇反射的博客，现在自己写了一些反射常用的代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">      &#123;</span><br><span class="line">       </span><br><span class="line">          Person person=new Person();</span><br><span class="line">          //获得类型</span><br><span class="line">          var t = typeof(Person);</span><br><span class="line">     		//获得所有公有属性</span><br><span class="line">          var p= t.GetProperties();</span><br><span class="line">     		//根据属性名称给属性赋值</span><br><span class="line">          for (int j = 0; j &lt; p.Length; j++)</span><br><span class="line">          &#123;</span><br><span class="line">              if (p[j].Name == &quot;Name&quot;)</span><br><span class="line">              &#123;</span><br><span class="line">                  p[j].SetValue(person,&quot;heyuke&quot;);</span><br><span class="line">              &#125;</span><br><span class="line">              if (p[j].Name == &quot;Age&quot;)</span><br><span class="line">              &#123;</span><br><span class="line">                  p[j].SetValue(person, 18);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     		//获取属性</span><br><span class="line">          var r = p[0].GetValue(person);</span><br><span class="line">     		//通过名称获取方法</span><br><span class="line">          var m = t.GetMethod(&quot;Speak&quot;);</span><br><span class="line">     		//调用方法，第一个参数为调用的对象，第二个参数为调用方法所需的参数</span><br><span class="line">          m.Invoke(person,new object[]&#123;&#125;);</span><br><span class="line">          int i = 0;</span><br><span class="line">      &#125;</span><br><span class="line">      class Person</span><br><span class="line">      &#123;</span><br><span class="line">          public string Name &#123; get; set; &#125;</span><br><span class="line">          public int Age &#123; get; set; &#125;</span><br><span class="line">          public void Speak()</span><br><span class="line">          &#123;</span><br><span class="line">              Console.WriteLine(&quot;hahha&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> c# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 反射 </tag>
            
            <tag> 泛型，orm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[敲代码的小铁匠的简历]]></title>
      <url>/2018/06/08/csharp%20%E7%AE%80%E5%8E%86/</url>
      <content type="html"><![CDATA[<hr>
<h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><ul>
<li>何玉珂/男/1994 </li>
<li>本科/洛阳理工学院/计算机科学与技术 </li>
<li>工作年限：2年</li>
<li>手机：188489567**</li>
<li>Email：<a href="mailto:123@heyuke.cn" target="_blank" rel="noopener">123@heyuke.cn</a></li>
<li>技术博客：<a href="https://hyke123.github.io/" target="_blank" rel="noopener">https://hyke123.github.io/</a></li>
<li>期望职位：c# asp.net 开发</li>
</ul>
<hr>
<h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><h2 id="河南中浩科技公司-（-2017年3月-至今-）"><a href="#河南中浩科技公司-（-2017年3月-至今-）" class="headerlink" title="河南中浩科技公司 （ 2017年3月 ~ 至今 ）"></a>河南中浩科技公司 （ 2017年3月 ~ 至今 ）</h2><h3 id="集卡ETC系统"><a href="#集卡ETC系统" class="headerlink" title="集卡ETC系统"></a>集卡ETC系统</h3><p>该系统主要功能类似高速收费站ETC不停车收费，适用车辆为大型集装箱卡车。实现原理是通过安装在车辆上的obu卡片和装在路口的感应天线进行无线通信，上位机读取车辆信息进行相关逻辑判断，然后控制道闸以及led显示屏进行信息提示。该系统的工作原理是通过上位机和下位机的网口通信以及上位机和道闸的串口通信。该系统采用winform进行开发，其中用到socket通信以及UI多线程技术。其中记录扣费信息是通过调用java开发的接口来进行实现。</p>
<h3 id="智能场站系统"><a href="#智能场站系统" class="headerlink" title="智能场站系统"></a><strong>智能场站系统</strong></h3><p>该系统是为郑州国际陆港拼箱部的堆场管理设计的，主要是完成客户送货的接收，订单入库，订单的分柜管理和装箱方案的设计。整个项目结构依旧采用传统的三层，技术框架采用ASP.NET MVC+EF+SQLSERVER，其中EF采用的是database first，更符合一般的开发思路，前台最初使用jquery+bootstrap，后来用vue.js和element进行了部分页面的改写，其中vue.js通过标签引入直接开发，未使用node.js和webpack进行打包部署。同时对于项目中的接货部分开发了微信小程序来进行辅助扫码接货。目前该系统仍在开发中。</p>
<h3 id="汽车口岸智能卡口系统"><a href="#汽车口岸智能卡口系统" class="headerlink" title="汽车口岸智能卡口系统"></a>汽车口岸智能卡口系统</h3><p>该系统是用于汽车口岸进出口的卡口，卡口设计为4通道，涉及的硬件有红外对射，箱号识别摄像头，车牌识别摄像头，RFID射频天线，IC卡读写器，语音播报器，led显示屏，道闸等。在这个项目自己主要负责上位机的开发，工作流程为：卡车上的集装箱触发红外对射，然后红外控制箱号识别摄像头抓拍4张图片进行箱号识别，车继续行进，光学车牌抓拍车牌号，射频天线读取卡车上安装的电子标签信息，司机经过道闸时刷IC卡，上位机采取到这一系列信息保存到数据库并和海关数据进行比对，然后控制道闸抬杆放行。软件开发技术采用的winfom，该项目对接硬件较多，和硬件交互主要依靠厂家提供的sdk，其中IC卡，语音播报，led显示屏通过串口服务器和上位机通信，其他硬件设备主要是网口通信。</p>
<h3 id="智能停车场项目"><a href="#智能停车场项目" class="headerlink" title="智能停车场项目"></a>智能停车场项目</h3><p>该项目为一个智能停车场项目，该停车场是立体车库，车主来停车时plc给车辆分配车位，车主可以通过微信公众号来进行取车操作。这个项目有上位机程序，还有一个web端程序。其中plc和上位机通过socket通信，上位机可以控制车辆的存取，同时将信息同步到web端，web端和上位机通过websocket进行连接通信，web端和公众号服务端通过http协议对接。这个项目我们只负责可上位机程序和web端程序。web端采用mvc+sqlserver+layui，使用前后端分离的模式进行开发。</p>
<h3 id="郑州国际陆港订舱系统"><a href="#郑州国际陆港订舱系统" class="headerlink" title="郑州国际陆港订舱系统"></a>郑州国际陆港订舱系统</h3><p>该系统是郑州国际陆港的订舱服务平台，主要完成客户订舱下单以及辅助公司各部门同事的日常办公。在这个系统的一些工作主要是配合其他同事完成一些模块的开发，该系统框架采用的是webform,数据访问层对原生的ado.net进行了一层封装，自己在开发的时候封装了一个ajaxBase页面，使其开发时能够类似mvc方式，并在处理Dto传输映射时使用了一些反射技术。</p>
<hr>
<h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><ul>
<li>能够操作C#和.NET Framework开发、熟悉B/S、C/S模式编程，有良好的代码习惯</li>
<li>能够使用ASP.NET Web Forms 和一般处理程序+静态页进行Web开发</li>
<li>能够使用ASP.NET Mvc进行开发，了解Mvc中的模型绑定，路由，过滤器等相关技术</li>
<li>熟悉socket通信，解决过粘包，心跳，断线重连等问题。对异步编程有了解。</li>
<li>掌握ADO.NET，了解Entity Framework、ORM、 Linq To SQL</li>
<li>掌握SQL Server数据库，掌握关系型数据库的设计，掌握T-SQL语句</li>
<li>掌握前端相关技术（HTML、JavaScript、Ajax、Mvvm），能使用JQuery和相关UI插件，了解vue.js。</li>
<li>对单例、工厂等设计模式有了解。</li>
</ul>
<h2 id="参考技能关键字"><a href="#参考技能关键字" class="headerlink" title="参考技能关键字"></a>参考技能关键字</h2><ul>
<li>ASP.NET MVC</li>
<li>EF+LINQ </li>
<li>socket 多线程 异步</li>
<li>前后端分离、跨域</li>
<li>VUE.JS、 JQUERY</li>
<li>SQLSERVER</li>
</ul>
<hr>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>
]]></content>
      
        <categories>
            
            <category> 求职 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 求职 </tag>
            
            <tag> 工作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bootStrapTable 使用相关]]></title>
      <url>/2018/01/29/bootStrapTable%20%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>一般选项按照注释即可理解意思，主要是<strong>配字段</strong>—如何将ViewModel的属性显示成表格的字段。</p>
<ul>
<li><p>一般配置：  { title: ‘仓位号’, field: ‘OrderId’, align: ‘center’ }</p>
</li>
<li><p>列不可见：{ title: ‘id’, field: ‘Id’, visible: false }, visible: false。</p>
</li>
<li><p>格式化列： 主要是 formatter: function (value, row, index) {}函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;  <span class="attr">title</span>: <span class="string">'状态'</span>,<span class="attr">field</span>: <span class="string">'StatusType'</span>,<span class="attr">align</span>: <span class="string">'center'</span>,<span class="attr">formatter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value, row, index</span>) </span>&#123; <span class="keyword">if</span> (value == <span class="string">'待审核'</span>) &#123;&#125;&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>详细的配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#tb_receiveInfo'</span>).bootstrapTable(&#123;</span><br><span class="line">           url: <span class="string">'/ReceiveGoods/ShowReceive'</span>,         <span class="comment">//请求后台的URL（*）</span></span><br><span class="line">           method: <span class="string">'post'</span>,                      <span class="comment">//请求方式（*）</span></span><br><span class="line">           toolbar: <span class="string">'#toolbar'</span>,                <span class="comment">//工具按钮用哪个容器</span></span><br><span class="line">           striped: <span class="literal">true</span>,                      <span class="comment">//是否显示行间隔色</span></span><br><span class="line">           cache: <span class="literal">false</span>,                       <span class="comment">//是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）</span></span><br><span class="line">           pagination: <span class="literal">true</span>,                   <span class="comment">//是否显示分页（*）</span></span><br><span class="line">           sortable: <span class="literal">true</span>,                     <span class="comment">//是否启用排序</span></span><br><span class="line">           sortOrder: <span class="string">"asc"</span>,                   <span class="comment">//排序方式</span></span><br><span class="line">           queryParams: oTableInit.queryParams,<span class="comment">//传递参数（*）</span></span><br><span class="line">           sidePagination: <span class="string">"client"</span>,           <span class="comment">//分页方式：client客户端分页，server服务端分页（*）</span></span><br><span class="line">           pageNumber: <span class="number">1</span>,                       <span class="comment">//初始化加载第一页，默认第一页</span></span><br><span class="line">           pageSize: <span class="number">10</span>,                       <span class="comment">//每页的记录行数（*）</span></span><br><span class="line">           pageList: [<span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>],        <span class="comment">//可供选择的每页的行数（*）</span></span><br><span class="line">           search: <span class="literal">true</span>,                       <span class="comment">//是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大</span></span><br><span class="line">           strictSearch: <span class="literal">false</span>,</span><br><span class="line">           showColumns: <span class="literal">true</span>,                  <span class="comment">//是否显示所有的列</span></span><br><span class="line">           showRefresh: <span class="literal">false</span>,                  <span class="comment">//是否显示刷新按钮</span></span><br><span class="line">           minimumCountColumns: <span class="number">2</span>,             <span class="comment">//最少允许的列数</span></span><br><span class="line">           clickToSelect: <span class="literal">true</span>,                <span class="comment">//是否启用点击选中行</span></span><br><span class="line">          <span class="comment">// height: 500,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度</span></span><br><span class="line">           uniqueId: <span class="string">"ID"</span>,                     <span class="comment">//每一行的唯一标识，一般为主键列</span></span><br><span class="line">           showToggle: <span class="literal">false</span>,                    <span class="comment">//是否显示详细视图和列表视图的切换按钮</span></span><br><span class="line">           cardView: <span class="literal">false</span>,                    <span class="comment">//是否显示详细视图</span></span><br><span class="line">           detailView: <span class="literal">false</span>,                   <span class="comment">//是否显示父子表</span></span><br><span class="line">           columns: [&#123;</span><br><span class="line">               checkbox: <span class="literal">true</span></span><br><span class="line">           &#125;, &#123; <span class="attr">title</span>: <span class="string">'id'</span>, <span class="attr">field</span>: <span class="string">'Id'</span>, <span class="attr">visible</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">           &#123; <span class="attr">title</span>: <span class="string">'仓位号'</span>, <span class="attr">field</span>: <span class="string">'OrderId'</span>, <span class="attr">align</span>: <span class="string">'center'</span> &#125;,</span><br><span class="line">           &#123; <span class="attr">title</span>: <span class="string">'接货编号'</span>, <span class="attr">field</span>: <span class="string">'ReceiveNum'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</span><br><span class="line">           &#123; <span class="attr">title</span>: <span class="string">'接货日期'</span>, <span class="attr">field</span>: <span class="string">'ReceiveDate'</span>, <span class="attr">align</span>: <span class="string">'center'</span> &#125;,</span><br><span class="line">           &#123; <span class="attr">title</span>: <span class="string">'班列日期'</span>, <span class="attr">field</span>: <span class="string">'TrainDate'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</span><br><span class="line">           &#123; <span class="attr">title</span>: <span class="string">'业务部门'</span>, <span class="attr">field</span>: <span class="string">'BusinessDepart'</span>, <span class="attr">align</span>: <span class="string">'center'</span> &#125;,</span><br><span class="line">           &#123; <span class="attr">title</span>: <span class="string">'货物名称'</span>, <span class="attr">field</span>: <span class="string">'GoodsName'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</span><br><span class="line">           &#123; <span class="attr">title</span>: <span class="string">'包装方式'</span>, <span class="attr">field</span>: <span class="string">'PackagingMethod'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</span><br><span class="line">           &#123; <span class="attr">title</span>: <span class="string">'数量'</span>, <span class="attr">field</span>: <span class="string">'GoodsNumber'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</span><br><span class="line">           &#123; <span class="attr">title</span>: <span class="string">'跟单员'</span>, <span class="attr">field</span>: <span class="string">'Merchandiser'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</span><br><span class="line">           &#123; <span class="attr">title</span>: <span class="string">'接货人'</span>, <span class="attr">field</span>: <span class="string">'ReceivePerson'</span>, <span class="attr">align</span>: <span class="string">'center'</span> &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   field: <span class="string">'DriverSignature'</span>,</span><br><span class="line">                   title: <span class="string">'司机'</span>,</span><br><span class="line">                   align: <span class="string">'center'</span>,</span><br><span class="line">                   formatter: <span class="function"><span class="keyword">function</span> (<span class="params">value, row, index</span>) </span>&#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="string">'&lt;img  src="/ReceiveGoods/GetImg?Id='</span> + row.Id + <span class="string">'" width="30px" height="30px"  &gt;'</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123; <span class="attr">title</span>: <span class="string">'叉车员'</span>, <span class="attr">field</span>: <span class="string">'Driver'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</span><br><span class="line">               &#123; <span class="attr">title</span>: <span class="string">'到货'</span>, <span class="attr">field</span>: <span class="string">'Remark'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   title: <span class="string">'状态'</span>,</span><br><span class="line">                   field: <span class="string">'StatusType'</span>,</span><br><span class="line">                   align: <span class="string">'center'</span>,</span><br><span class="line">                   formatter: <span class="function"><span class="keyword">function</span> (<span class="params">value, row, index</span>) </span>&#123;</span><br><span class="line">                       <span class="keyword">if</span> (value == <span class="string">'待审核'</span>) &#123;</span><br><span class="line">                           <span class="keyword">return</span> <span class="string">'&lt;button type="button" class="btn btn-success  btn-sm" onclick="Aduiting(\''</span> + row.Id + <span class="string">'\')" width="22px"&gt;审核&lt;/button&gt;'</span>;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           <span class="keyword">return</span> <span class="string">'&lt;button type="button" class="btn btn-success  btn-sm" disabled="true" width="22px"&gt;已审核&lt;/button&gt;'</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   </span><br><span class="line">               &#125;,</span><br><span class="line">               &#123; <span class="attr">title</span>: <span class="string">'审核时间'</span>, <span class="attr">field</span>: <span class="string">'AuditingDate'</span>, <span class="attr">align</span>: <span class="string">'center'</span>&#125;,</span><br><span class="line">               <span class="comment">//&#123;</span></span><br><span class="line">               <span class="comment">//    field: 'action1', title: 'Action', width: 120, align: 'center',</span></span><br><span class="line">               <span class="comment">//    formatter: function (value, row, index) &#123;</span></span><br><span class="line">               <span class="comment">//        //这里应该传vlaue的值即id 但是传不过去 原因未知？</span></span><br><span class="line">               <span class="comment">//        //实际传递的参数是this，即点击的对象a标签</span></span><br><span class="line">               <span class="comment">//        //还有就是调用的函数要写在初始化函数外面 原因未知？</span></span><br><span class="line">               <span class="comment">//        var e = '&lt;a href="#" onclick="aduiting(this)"&gt;审核 &lt;/a&gt;';</span></span><br><span class="line">               <span class="comment">//        var d = '&lt;a class="print_btnA" href="#"onclick = "pinrt_info()"  &gt;打印 &lt;/a&gt;';</span></span><br><span class="line">               <span class="comment">//        var f = '&lt;a href="#" onclick="sendMail(this)"&gt;异常处理&lt;/a&gt;';</span></span><br><span class="line">               <span class="comment">//        return e + d + f;</span></span><br><span class="line">               <span class="comment">//    &#125;</span></span><br><span class="line">               <span class="comment">//&#125;</span></span><br><span class="line">           ]</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="获得选中行"><a href="#获得选中行" class="headerlink" title="获得选中行"></a>获得选中行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tds = $(<span class="string">"#tb_receiveInfo"</span>).bootstrapTable(<span class="string">'getSelections'</span>);</span><br><span class="line">           <span class="keyword">if</span> (tds.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">               alert(<span class="string">'只能选择一行进行编辑'</span>)</span><br><span class="line">               <span class="comment">// toastr.warning('只能选择一行进行编辑');</span></span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (tds.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">               alert(<span class="string">'请选择有效数据'</span>)</span><br><span class="line">               <span class="comment">//toastr.warning('请选择有效数据');</span></span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           tds = tds[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<h4 id="刷新表格"><a href="#刷新表格" class="headerlink" title="刷新表格"></a>刷新表格</h4><p> $(“#tb_receiveInfo”).bootstrapTable(‘refresh’);</p>
<h4 id="客户端分页和服务端分页"><a href="#客户端分页和服务端分页" class="headerlink" title="客户端分页和服务端分页"></a>客户端分页和服务端分页</h4><p>客户端分页和服务端分页，前台部分只需将<strong>sidePagination</strong>属性设置为client或者server即可，但是后台返回的数据格式还是稍微有点不一样。</p>
<ul>
<li>客户端分页返回的样式为{data:数据}；</li>
<li>服务端分页返回的杨思为{total:总条数，rows:数据}；</li>
</ul>
<p>其中服务端分页也要注意前台到后台参数的传递，系统为我们提供两个参数，一个是<strong>limit</strong>代表页面显示条数，另一个是<strong>offset</strong>，代表偏移量。在前台利用这两个参数求出pageSize，pageIndex。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pageSize: params.limit,   <span class="comment">//页面大小       </span></span><br><span class="line">pageIndex: params.offset / params.limit + <span class="number">1</span>,  <span class="comment">//页码</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> bootstrapTabel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net 异步委托]]></title>
      <url>/2017/11/01/csharp%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这里讲一下自己对异步的理解，以及相关的实现及应用</p>
</blockquote>
<h4 id="什么是异步"><a href="#什么是异步" class="headerlink" title="什么是异步"></a>什么是异步</h4><p>当按照正常的代码顺序一行一行执行的时候我们可以看作是同步执行，当然有时候并不是按照代码的行数顺序执行，我们可以在这一行调用函数，这样可能从第十行一下跳到第二十行，但是这依旧是符合我们正常的代码逻辑的。</p>
<hr>
<p>现在比方说：程序要对一台服务器发起请求，我想当请求 成功以后再给服务器发送下一条信息，如果是同步执行，我们可能就是发起请求，然后一直等待，等待服务器响应后我们下面的发送信息代码才能执行，那么在连接服务器的这个过程中，我们的主线程是阻塞了的（cpu也闲置了，只进行IO操作），这样可能造成界面<strong>假死</strong>或者其他不好的影响。</p>
<p>我们希望是在对服务器发出请求 的同时，cpu可以继续处理其他事物。这就要用到异步。</p>
<p>异步委托其实就是，当委托异步调用的时候，再创建了一个线程去执行委托指向的方法。下面介绍两种具体实现方法：</p>
<p><strong>coding:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(&quot; Main Thread:&quot; + Thread.CurrentThread.ManagedThreadId);//当前线程</span><br><span class="line">//定义委托并用兰姆达实现</span><br><span class="line">Func&lt;int, int, string&gt; delFunc = (a, b) =&gt;</span><br><span class="line"> &#123;</span><br><span class="line">      Console.WriteLine(&quot; Delegate Thread:&quot; + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">      Thread.Sleep(2000);</span><br><span class="line">      return (a + b).ToString();</span><br><span class="line"> &#125;;</span><br><span class="line">string str = delFunc(3, 4);</span><br></pre></td></tr></table></figure>
<p>上面是普通的定义委托并调用委托的方式</p>
<hr>
<p><strong>coding:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//异步调用委托</span><br><span class="line">//内部原理就是：使用了一个线程池的线程去执行了委托指向的方法。</span><br><span class="line">//拿到异步委托的结果</span><br><span class="line">IAsyncResult result = delFunc.BeginInvoke(3, 4, null, null);</span><br><span class="line">if (!result.IsCompleted)</span><br><span class="line"> &#123;</span><br><span class="line">	//通过 IAsyncResult,可以获得该委托的相关信息,</span><br><span class="line">    //并验证该委托是否完成了任务,这是IsCompleted属性的功劳。</span><br><span class="line">  </span><br><span class="line">    //doSomeThingInMainThread();在主线程里做</span><br><span class="line">  &#125;</span><br><span class="line">//EndoInvoke方法会阻塞当前的线程，直到异步委托指向完成之后，才能继续往下执行。</span><br><span class="line">string str1 = delFunc.EndInvoke(result); </span><br><span class="line">Console.WriteLine(str1);</span><br></pre></td></tr></table></figure>
<p>上面这一种是通过轮询</p>
<hr>
<p><strong>coding</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">delFunc.BeginInvoke(5, 6, MyAsyncCallback, &quot;123&quot;);</span><br><span class="line">//对于BeginInvoke方法的第四个参数，可以传递任意对象，以便从回调方法中方为使用它，通过IAsyncResult的AsyncState属性来访问它。 </span><br><span class="line">delFunc.BeginInvoke(5, 6, MyAsyncCallback, delFunc);</span><br><span class="line">public static void MyAsyncCallback(IAsyncResult ar)</span><br><span class="line">&#123;</span><br><span class="line">     var del = (Func&lt;int, int, string&gt;)ar.AsyncState;</span><br><span class="line">     string str = del.EndInvoke(ar);</span><br><span class="line">     ////1、拿到异步委托执行的结果</span><br><span class="line">     //AsyncResult result = (AsyncResult)ar;</span><br><span class="line">     //var del = (Func&lt;int, int, string&gt;)result.AsyncDelegate;</span><br><span class="line">     //string returnValue = del.EndInvoke(result);</span><br><span class="line">     //Console.WriteLine(&quot;返回值是：&quot;+returnValue);</span><br><span class="line">     ////2、拿到给回调函数的参数。</span><br><span class="line">     //Console.WriteLine(&quot;传给异步回调函数的参数：&quot;+result.AsyncState);</span><br><span class="line">     Console.WriteLine(&quot;回调函数的线程 的id是：&quot; + Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这是回调函数的方式。</p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 异步 </tag>
            
            <tag> 委托 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net Socket连接断开判断]]></title>
      <url>/2017/11/01/csharp%20Socket%E6%96%AD%E7%BA%BF%E5%88%A4%E6%96%AD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Socket 编程 里面怎么才能判断其中一方是否断开连接。</p>
</blockquote>
<ol>
<li><p>当断开连接的时候我饿们调用<em>receive()</em>函数从缓冲区里读数据的时候，这个时候会抛出一个异常，我们只需在捕捉这个异常，并在<em>catch</em>里面进行处理就行，然后关闭对应的socket。</p>
</li>
<li><p>还有一种方式是通过：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static bool IsSocketConnected(Socket s)</span><br><span class="line">&#123;</span><br><span class="line">           return !((s.Poll(1000, SelectMode.SelectRead) &amp;&amp; (s.Available == 0)) || 		             !s.Connected);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>​    这里主要说明<em>socket.Poll()</em>这个函数，第一个参数是超时时间，单位是微秒，第二个参数是判断可以读取的正常的socket。通过这三个条件一起进行判断，如果只判断Available或者Connected是不行的。</p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> Socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net Socket编程（服务端）]]></title>
      <url>/2017/10/27/csharp%20Socket%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Socket 编程 里面牵涉到了多线程以及异步编程的一些相关知识，在这记录一下，看下自己的理解 </p>
</blockquote>
<p>先说服务端流程：</p>
<ol>
<li>先创建一个socket对象，参数未创建的对象的连接协议，传输方式等。</li>
<li>然后指明服务端的ip地址以及端口，将端口和ip封装成相应的对象作为参数传入刚socket.bind()函数，表示socket绑定端口开始监听（<em>调用socket.listen（）</em>）。（至此客户端已经可以进行连接服务端了）</li>
<li>监听函数的编写，主要是做个死循环，调用socket.accept（）函数监听，调用函数后到的是一个socket对象conSocket，用这个conSocket对象开始进行于客户端的数据传输。</li>
<li>传输函数的编写，也是做个死循环，调用conSocket.receive()接收数据。这里需要注意的是<strong>假如客户端关闭则调用这个函数会抛出异常</strong>，所以我们可以以此来判断客户端是否掉线。</li>
<li>函数之间是线程调用的，先创建一个监听线程封装监听函数，再在监听线程里面创建一个通信线程，用来传输数据。注意传输线程是一个带参的线程</li>
</ol>
<hr>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace SocketPractice</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        private static Socket socketSer;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateSerInfo();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void CreateSerInfo()</span><br><span class="line">        &#123;</span><br><span class="line">            socketSer = new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);</span><br><span class="line">            IPAddress scIp =IPAddress.Parse(&quot;192.168.16.217&quot;);</span><br><span class="line">            IPEndPoint scPort = new IPEndPoint(scIp,8090);</span><br><span class="line"></span><br><span class="line">            socketSer.Bind(scPort);//创建的socket监听此端口</span><br><span class="line">            socketSer.Listen(20);//最大等待的连接数</span><br><span class="line"></span><br><span class="line">            Thread scWatchThread=new Thread(SerWatching);</span><br><span class="line">            scWatchThread.Start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void SerWatching()</span><br><span class="line">        &#123;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                Socket connectSocket=null;//声明一个用于客户端的socket</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    connectSocket = socketSer.Accept();//循环监听客户端这个套接字的请求</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(e);</span><br><span class="line">                   </span><br><span class="line">                &#125;</span><br><span class="line">               //获取监听到的这个套接字的一些信息</span><br><span class="line">                IPEndPoint clientIpEndPoint = connectSocket?.RemoteEndPoint as IPEndPoint;</span><br><span class="line">                string clientIp = clientIpEndPoint?.Address.ToString();</span><br><span class="line">                string clientPort = clientIpEndPoint?.Port.ToString();</span><br><span class="line">                Console.WriteLine(clientIp);</span><br><span class="line">                //构造一个带参数的线程，将监听到的这个套接字作为参数传过去</span><br><span class="line">                Thread transferThread = new Thread(new ParameterizedThreadStart(Rev)) &#123; IsBackground = true &#125;;</span><br><span class="line">                transferThread.Start(connectSocket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Rev(object socket)</span><br><span class="line">        &#123;</span><br><span class="line">            Socket conSocket= socket as Socket;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                if(conSocket == null) return;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    byte[] buffer = new byte[1024 * 1024];//声明一个缓冲区</span><br><span class="line">                    int bufferLength = conSocket.Receive(buffer);</span><br><span class="line">                    string strMsg = Encoding.UTF8.GetString(buffer, 0, bufferLength);//将收到的BYTE流转化成字符串</span><br><span class="line">                    if (!string.IsNullOrEmpty(strMsg))</span><br><span class="line">                    &#123;</span><br><span class="line">                        string sendMsg = &quot;我收到你的信息了&quot;;</span><br><span class="line">                        conSocket.Send(Encoding.UTF8.GetBytes(sendMsg));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(e);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> Socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net反射]]></title>
      <url>/2017/10/16/csharp%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<h3 id="net反射"><a href="#net反射" class="headerlink" title=".net反射"></a>.net反射</h3><blockquote>
<p>目前想到的反射利用场景是前台页面使用ajax调用后台方法时，在一般处理程序中，根据请求的方法名动态（自动）地来调用相对应的方法。</p>
</blockquote>
<p>下面是关于反射的一些基本介绍：</p>
<h4 id="反射单个程序集："><a href="#反射单个程序集：" class="headerlink" title="反射单个程序集："></a>反射单个程序集：</h4><p>1、Load 方法：极力推荐的一种方法，Load 方法带有一个程序集标志并载入它，Load 将引起CLR把策略应用到程序集上，先后在全局程序集缓冲区，应用程序基目录和私有路径下面查找该程序集，如果找不到该程序集系统抛出异常<br>2、LoadFrom 方法：传递一个程序集文件的路径名（包括扩展名），CLR会载入您指定的这个程序集，传递的这个参数不能包含任何关于版本号的信息，区域性，和公钥信息，如果在指定路径找不到程序集抛出异常。</p>
<h4 id="设置反射类型成员"><a href="#设置反射类型成员" class="headerlink" title="设置反射类型成员"></a>设置反射类型成员</h4><p>反射类型的成员就是反射层次模型中最下面的一层数据。我们可以通过type对象的GetMembers 方法取得一个类型的成员。如果我们使用的是不带参数的GetMembers，它只返回该类型的公共定义的静态变量和实例成员，我们也可以通过使用带参数的 GetMembers通过参数设置来返回指定的类型成员。具体参数参考msdn 中system.reflection.bindingflags 枚举类型的详细说明。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//设置需要返回的类型的成员内容</span><br><span class="line">bindingFlags bf=bingdingFlags.DeclaredOnly|bingdingFlags.Nonpublic|BingdingFlags.Public;</span><br><span class="line">foreach (MemberInfo mi int t.getmembers(bf))</span><br><span class="line">&#123;</span><br><span class="line">       writeline(mi.membertype)    //输出指定的类型成员</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="通过反射创建类型的实例："><a href="#通过反射创建类型的实例：" class="headerlink" title="通过反射创建类型的实例："></a>通过反射创建类型的实例：</h4><p>通过反射可以获取程序集的类型，我们就可以根据获得的程序集类型来创建该类型新的实例，这也是前面提到的在运行时创建对象实现晚绑定的功能<br>我们可以通过下面的几个方法实现：<br>1、System.Activator 的CreateInstance方法。该方法返回新对象的引用。具体使用方法参见msdn<br>2、System.Activator 的createInstanceFrom 与上一个方法类似，不过需要指定类型及其程序集<br>3、System.Appdomain 的方法：createInstance,CreateInstanceAndUnwrap,CreateInstranceFrom和CreateInstraceFromAndUnwrap<br>4、System.type的InvokeMember实例方法：这个方法返回一个与传入参数相符的构造函数，并构造该类型。<br>5、System.reflection.constructinfo 的Invoke实例方法</p>
<h4 id="反射的性能"><a href="#反射的性能" class="headerlink" title="反射的性能"></a>反射的性能</h4><p>使用反射来调用类型或者触发方法，或者访问一个字段或者属性时clr 需要做更多的工作：校验参数，检查权限等等，所以速度是非常慢的。所以尽量不要使用反射进行编程，对于打算编写一个动态构造类型（晚绑定）的应用程序，可以采取以下的几种方式进行代替：<br>1、通过类的继承关系。让该类型从一个编译时可知的基础类型派生出来，在运行时生成该类型的一个实例，将对其的引用放到其基础类型的一个变量中，然后调用该基础类型的虚方法。<br>2、通过接口实现。在运行时，构建该类型的一个实例，将对其的引用放到其接口类型的一个变量中，然后调用该接口定义的虚方法。<br>3、通过委托实现。让该类型实现一个方法，其名称和原型都与一个在编译时就已知的委托相符。在运行时先构造该类型的实例，然后在用该方法的对象及名称构造出该委托的实例，接着通过委托调用你想要的方法。这个方法相对与前面两个方法所作的工作要多一些，效率更低一些。</p>
<hr>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.Reflection.Assembly ass = Assembly.LoadFrom(Server.MapPath(&quot;bin/swordyang.dll&quot;)); //加载DLL</span><br><span class="line">System.Type t = ass.GetType(&quot;cn.SwordYang.TextClass&quot;);//获得类型</span><br><span class="line">object o = System.Activator.CreateInstance(t);//创建实例</span><br><span class="line">System.Reflection.MethodInfo mi = t.GetMethod(&quot;RunJs&quot;);//获得方法</span><br><span class="line">mi.Invoke(o, new object[] &#123; this.Page,&quot;alert(&apos;测试反射机制&apos;)&quot;&#125;);//调用方法</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 反射 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net委托]]></title>
      <url>/2017/10/16/csharp%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<h3 id="net委托"><a href="#net委托" class="headerlink" title=".net委托"></a>.net委托</h3><h4 id="委托的概念"><a href="#委托的概念" class="headerlink" title="委托的概念"></a>委托的概念</h4><p>委托是c#一种引用类型，委托可以看成是对方法的封装，即一个指针，指向一个方法。从而使方法作为参数进行传递。换种说法来说，是为了<strong>占位</strong>，在不知道将来要执行的代码的时候，先通过委托来进行占位，在实际调用之前再给委托赋值。</p>
<h4 id="多播委托"><a href="#多播委托" class="headerlink" title="多播委托"></a>多播委托</h4><p>委托可以通多+=来绑定多个方法。需要注意的是<strong>委托绑定多个方法后，其中一个方法执行发生异常后面的方法不会继续执行</strong>。</p>
<h4 id="泛型委托"><a href="#泛型委托" class="headerlink" title="泛型委托"></a>泛型委托</h4><p>dotnet为我们方便定义委托，给我们提供一组<strong>内置类</strong> </p>
<ul>
<li>Action</li>
<li>Func </li>
<li>Predicate</li>
</ul>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ol>
<li>事件可以是委托的一个实列。</li>
<li>事件的本质<ul>
<li>event会自动生成一个private delegate变量和两个函数: add和remove。</li>
<li>因为该委托变量是private的，所以在类外部不能触发事件，但是在类内部可以。</li>
<li>public的方法只有Add和Remove，所以只能+=、-=，其他的操作都是不可以的。</li>
</ul>
</li>
</ol>
<h4 id="委托和事件的区别"><a href="#委托和事件的区别" class="headerlink" title="委托和事件的区别"></a>委托和事件的区别</h4><ol>
<li>委托是一种数据类型，事件是一个实列对象。</li>
<li>事件只能在声明它的类内部调用。</li>
<li>事件只能使用+= -=不能直接赋值</li>
<li>委托不受2 3的限制</li>
</ol>
<p>这里主要说编程中用的比较多的三种系统内置委托。</p>
<ol>
<li>Action</li>
</ol>
<p>​         Action是无返回值的泛型委托。</p>
<p>　　 Action 表示无参，无返回值的委托</p>
<p>　　 Action&lt;int,string&gt; 表示有传入参数int,string无返回值的委托</p>
<p> 　　Action&lt;int,string,bool&gt; 表示有传入参数int,string,bool无返回值的委托</p>
<p>​        Action&lt;int,int,int,int&gt; 表示有传入4个int型参数，无返回值的委托</p>
<p>　　 Action至少0个参数，至多16个参数，无返回值。</p>
<ol start="2">
<li>Func</li>
</ol>
<p>​         Func是有返回值的泛型委托</p>
<p>　　 Func<int> 表示无参，返回值为int的委托</int></p>
<p>　　 Func&lt;object,string,int&gt; 表示传入参数为object, string 返回值为int的委托</p>
<p>　　 Func&lt;object,string,int&gt; 表示传入参数为object, string 返回值为int的委托</p>
<p>　　 Func&lt;T1,T2,,T3,int&gt; 表示传入参数为T1,T2,,T3(泛型)返回值为int的委托</p>
<p>　　 Func至少0个参数，至多16个参数，根据返回值泛型返回。必须有返回值，不可void</p>
<ol start="3">
<li>predicate</li>
</ol>
<p>​        predicate 是返回bool型的泛型委托</p>
<p>　　 predicate<int> 表示传入参数为int 返回bool的委托</int></p>
<p>　　 Predicate有且只有一个参数，返回值固定为bool</p>
<p>　　 例：public delegate bool Predicate<t> (T obj)</t></p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 委托 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net多线程]]></title>
      <url>/2017/10/16/csharp%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="net-多线程"><a href="#net-多线程" class="headerlink" title=".net 多线程"></a>.net 多线程</h3><blockquote>
<p>线程牵涉的东西很多，自己只是用到了一点，学习了一点，现在把用到的学到的一点记录下来。</p>
</blockquote>
<h4 id="多线程使用场景-winform"><a href="#多线程使用场景-winform" class="headerlink" title="多线程使用场景-winform"></a>多线程使用场景-winform</h4><p>在winform中如果使用死循环就会导致窗体线程假死，从而导致不能操作窗体上控件的现象，这个问题可以使用多线程来解决。</p>
<p>线程函数通过委托传递，可以不带参数，也可以带参数（只能有一个参数且为object类型，传递的方法没有返回值），可以用一个类或结构体封装参数。</p>
<p>话不多说，直接上代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">namespace Test</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Thread t1 = new Thread(new ThreadStart(TestMethod));</span><br><span class="line">            Thread t2 = new Thread(new ParameterizedThreadStart(TestMethod));</span><br><span class="line">            t1.IsBackground = true;</span><br><span class="line">            t2.IsBackground = true;</span><br><span class="line">            t1.Start();</span><br><span class="line">            t2.Start(&quot;hello&quot;);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void TestMethod()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;不带参数的线程函数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void TestMethod(object data)</span><br><span class="line">        &#123;</span><br><span class="line">            string datastr = data as string;</span><br><span class="line">            Console.WriteLine(&quot;带参数的线程函数，参数为：&#123;0&#125;&quot;, datastr);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      //使用兰姆达表达式来简化代码</span><br><span class="line">        Thread th = new Thread(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">                while(true)</span><br><span class="line">               &#123;</span><br><span class="line">                                     </span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        th.IsBackground = true;//会随着主线程的关闭关闭这个子线程</span><br><span class="line">        th.Priority = ThreadPriority.Highest;</span><br><span class="line">        th.Start();            </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="跨线程访问"><a href="#跨线程访问" class="headerlink" title="跨线程访问"></a>跨线程访问</h4><p>一旦在winform 中使用了多线程，就会存在跨线程访问控件的问题，解决方案如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void UpdateWindowInfo(FormMode model)</span><br><span class="line">        &#123;</span><br><span class="line">            this.Invoke(new Action&lt;FormMode&gt;(fm =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                //lblCarType.Text = &quot;集卡车&quot;;</span><br><span class="line">                //lblEntrance.Text = &quot;郑州陆港集卡ETC&quot;;</span><br><span class="line">                lblConsumeTime.Text = DateTime.Now.ToString();</span><br><span class="line">                //lblETCCarNum.Text = &quot;14100531345&quot;;</span><br><span class="line">                lblCarNum.Text = model?.CarNumber ?? &quot;&quot;;</span><br><span class="line">                model.TradeMessge = &quot;&quot;;</span><br><span class="line">            &#125;), model);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>关于多线程的内容很多，还有线程池，线程的同步异步调用以及锁 task等内容，这些东西看了一些，但是没怎么看懂，所以就不写了。</p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跨域问题]]></title>
      <url>/2017/08/21/MVC%E5%92%8CWEBAPI%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="Web-api-的解决方案"><a href="#Web-api-的解决方案" class="headerlink" title="Web api 的解决方案"></a>Web api 的解决方案</h3><ol>
<li>需要在web.config中的&lt;system.webServer&gt;节点中添加如下的内容</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;httpProtocol&gt;</span><br><span class="line">&lt;customHeaders&gt;</span><br><span class="line">&lt;add name=&quot;Access-Control-Allow-Origin&quot; value=&quot;*&quot; /&gt;</span><br><span class="line">&lt;add name=&quot;Access-Control-Allow-Headers&quot; value=&quot;Content-Type&quot; /&gt;</span><br><span class="line">&lt;add name=&quot;Access-Control-Allow-Methods&quot; value=&quot;GET, POST, PUT, DELETE, OPTIONS&quot; /&gt;</span><br><span class="line">&lt;/customHeaders&gt;</span><br><span class="line">&lt;/httpProtocol&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在App_Start文件夹下的WebApiConfig.cs类中加入下面的函数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">      /// 允许跨域调用</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;param name=&quot;config&quot;&gt;&lt;/param&gt;</span><br><span class="line">      private static void EnableCrossSiteRequests(HttpConfiguration config)</span><br><span class="line">      &#123;</span><br><span class="line">          //对所有的请求来源没有任何限制</span><br><span class="line">          var cors = new EnableCorsAttribute(</span><br><span class="line">              origins: &quot;*&quot;,</span><br><span class="line">              headers: &quot;*&quot;,</span><br><span class="line">              methods: &quot;*&quot;</span><br><span class="line">          );</span><br><span class="line">          config.EnableCors(cors);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h3 id="asp-net-mvc的解决方案"><a href="#asp-net-mvc的解决方案" class="headerlink" title="asp.net mvc的解决方案"></a>asp.net mvc的解决方案</h3><ol>
<li>只做上述步骤1即可。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> c# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[程序代码块]]></title>
      <url>/2017/08/21/%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      <content type="html"><![CDATA[<p>一些常见的代码，写下来以后记不清的时候查阅。</p>
<h4 id="生成guid代码"><a href="#生成guid代码" class="headerlink" title="生成guid代码"></a>生成guid代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a=Guid.NewGuid().ToString();</span><br></pre></td></tr></table></figure>
<h4 id="序列化json字符串"><a href="#序列化json字符串" class="headerlink" title="序列化json字符串"></a>序列化json字符串</h4><p>序列化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string json = JsonConvert.SerializeObject(s);//s为要序列化的对象</span><br></pre></td></tr></table></figure>
<p>反序列化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = JsonConvert.DeserializeObject(json);</span><br><span class="line">//第二个参数为要格式化的对象类型</span><br><span class="line">var objectResult = JsonConvert.DeserializeAnonymousType(result.ToString(), new RootExcle());</span><br></pre></td></tr></table></figure>
<h4 id="数组声明方式"><a href="#数组声明方式" class="headerlink" title="数组声明方式"></a>数组声明方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[] intArray = new int[] &#123;1,2,3&#125;;</span><br><span class="line">int[] intArray = new int[10];</span><br></pre></td></tr></table></figure>
<h4 id="写入文件代码"><a href="#写入文件代码" class="headerlink" title="写入文件代码"></a>写入文件代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void LogFile(string fileName, string info)</span><br><span class="line">&#123;</span><br><span class="line">           </span><br><span class="line">            FileStream file;</span><br><span class="line">            if (!File.Exists(fileName))</span><br><span class="line">            &#123;</span><br><span class="line">                file = File.Create(fileName);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                file = new FileStream(fileName, FileMode.Append, FileAccess.Write, FileShare.ReadWrite);</span><br><span class="line">            &#125;</span><br><span class="line">            System.Text.Encoding encode = System.Text.UTF8Encoding.UTF8;</span><br><span class="line">            var bytes = encode.GetBytes(info);</span><br><span class="line">            file.Position = file.Length;</span><br><span class="line">            file.Write(bytes, 0, bytes.Length);</span><br><span class="line">            file.Flush();</span><br><span class="line">            file.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####查看数据碎片及清理碎片</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DBCC SHOWCONTIG (Busi_DistributionCenter_Info) WITH ALL_INDEXES</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span> all <span class="keyword">ON</span>  [Busi_DistributionCenter_Info] <span class="keyword">REBUILD</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span> all <span class="keyword">ON</span> [Busi_DistributionCenter_Info] REORGANIZE</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> c# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[非相关子查询和相关子查询执行过程详解]]></title>
      <url>/2017/08/17/%E7%9B%B8%E5%85%B3%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%92%8C%E9%9D%9E%E7%9B%B8%E5%85%B3%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h3 id="非相关子查询和相关子查询执行过程"><a href="#非相关子查询和相关子查询执行过程" class="headerlink" title="非相关子查询和相关子查询执行过程"></a><a href="http://blog.csdn.net/mascf/article/details/50288199" target="_blank" rel="noopener">非相关子查询和相关子查询执行过程</a></h3><p>前段时间有一个相关子查询的SQL语句，看不太懂他是如何执行的，为什么会出现那个结果。着实纠结了一把。下面来讲一下非相关子查询和相关子查询的执行过程是怎样的。</p>
<h4 id="非相关子查询"><a href="#非相关子查询" class="headerlink" title="非相关子查询"></a>非相关子查询</h4><hr>
<p>先看一个非相关子查询到sql语句。</p>
<p>需求：查询学生表student和学生成绩表grade中成绩为70分的学生的基本信息。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.sno,t.sname,t.sage,t.sgentle,t.sbirth,t.sdept <span class="keyword">from</span> student t <span class="keyword">where</span> t.sno <span class="keyword">in</span> (<span class="keyword">select</span> f.sno <span class="keyword">from</span> garde f <span class="keyword">where</span> f.score=<span class="number">70</span>)</span><br></pre></td></tr></table></figure>
<p>这个sql语句的执行时是简单的，</p>
<p>1、在grade表中找出成绩为70的学生学号sno,再将该学号返回到父查询作为where子句的条件。</p>
<p>2、在student表中找到该学号学生的其他基本信息。</p>
<h4 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h4><hr>
<p>所谓相关子查询，是指求解相关子查询不能像求解普通子查询那样，一次将子查询求解出来，然后求解父查询。相关子查询的内层查询由于与外层查询有关，因此必须反复求值。</p>
<p>下面看相关子查询的sql语句。</p>
<p>需求：在学生表student和学生成绩表grade找出参加了“计算机基础”课程并且分数在80分以上的所有学生信息。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.sno,t.sname,t.sage,t.sgentle,t.sbirth,sdept <span class="keyword">from</span> student t <span class="keyword">where</span> <span class="number">80</span>&lt;=(<span class="keyword">select</span> f.score <span class="keyword">from</span> grade f <span class="keyword">where</span> f.sno=t.sno <span class="keyword">and</span> f.cname=<span class="string">'计算机基础'</span>)</span><br></pre></td></tr></table></figure>
<p>该子查询的执行流程：</p>
<p>1、 先从父查询的student表中取出第一条记录的sno值，进入子查询中，比较其where子句的条件“where f.sno=t.sno and f.cname=’计算机基础’”，符合则返回score成绩。</p>
<p>2、 返回父查询，判断父查询的where子句条件80&lt;=返回的score,如果条件为true，则返回第1条记录。</p>
<p>3、 从父查询的student表中取出第2条数据，重复上述操作，直到所有父查询中的表中记录取完为止。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><hr>
<p>对比这两个查询的sql执行过程可以看出，相关子查询和非相关子查询的不同点在于，相关子查询依赖于父查询，父查询和子查询是有联系的，尤其在子查询的where语句中更是如此。明白了他们的执行过程，再去看相关子查询的代码，一下子就明白了。</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sql </tag>
            
            <tag> （非）相关查询 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[找出相同记录里最近时间的一条]]></title>
      <url>/2017/08/16/sql%20%E6%89%BE%E5%87%BA%E7%9B%B8%E5%90%8C%E8%AE%B0%E5%BD%95%E9%87%8C%E6%9C%80%E8%BF%91%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E6%9D%A1/</url>
      <content type="html"><![CDATA[<h3 id="sql-找出相同记录里最近时间的一条"><a href="#sql-找出相同记录里最近时间的一条" class="headerlink" title="sql 找出相同记录里最近时间的一条"></a>sql 找出相同记录里最近时间的一条</h3><p>样例表如下</p>
<p>sub_dh date Gname</p>
<p>A1001 2015/4/25 B清单</p>
<p>A1002 2015/6/27 C清单</p>
<p>A1001 2015/8/23 C清单</p>
<p>A1003 2015/5/28 A清单</p>
<p>第一条记录和第三条记录编号一样，要查询出最近时间的一条记录</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> A  <span class="keyword">where</span> <span class="built_in">date</span>=(<span class="keyword">select</span> <span class="keyword">max</span>(<span class="built_in">date</span>) <span class="keyword">from</span> <span class="keyword">test</span> B <span class="keyword">where</span> A.sub_dh=B.sub_dh)</span><br></pre></td></tr></table></figure>
<p>首先将表根据订单号自行自连接，然后查询出表里所有的记录其时间等于连接表里最近时间的。具体执行过程可参照 <strong>非相关子查询</strong> 里面的内容，这是一个非相关子查询。</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sql </tag>
            
            <tag> 最近时间 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c#连接oracle数据库]]></title>
      <url>/2017/08/16/csharp%E8%BF%9E%E6%8E%A5oracle%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>c#连接oracle数据库</p>
<blockquote>
<p>准备工作：</p>
<p>下载并引用Oracle.ManagedDataAccess.Client </p>
</blockquote>
<h4 id="控制台测试程序"><a href="#控制台测试程序" class="headerlink" title="控制台测试程序"></a>控制台测试程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">   &#123;</span><br><span class="line">       static void Main(string[] args)</span><br><span class="line">       &#123;</span><br><span class="line">           string constr = @&quot;User Id=zftest;Password=123456;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.16.84)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=orcl)))&quot;;</span><br><span class="line">           DataSet ds = OracleHelper.ExecuteDataset(constr, CommandType.Text, &quot;select *from dba_users&quot;);</span><br><span class="line">           DataTable dt = ds.Tables[0];</span><br><span class="line">           for (int i = 0; i &lt; dt.Rows.Count; i++)</span><br><span class="line">           &#123;</span><br><span class="line"></span><br><span class="line">               for (int j = 0; j &lt; dt.Columns.Count; j++)</span><br><span class="line">               &#123;</span><br><span class="line">                   Console.WriteLine(dt.Rows[i][j]);</span><br><span class="line">               &#125;</span><br><span class="line">               Console.WriteLine(&quot;\n&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           //int a=  OracleHelper.ExecuteNonQuery(constr, CommandType.Text, &quot;select *from dba_users&quot;);</span><br><span class="line"></span><br><span class="line">           int b = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h4 id="下面是OracleHelper-程序，参数是连接字符串和sql语句。"><a href="#下面是OracleHelper-程序，参数是连接字符串和sql语句。" class="headerlink" title="下面是OracleHelper 程序，参数是连接字符串和sql语句。"></a>下面是OracleHelper 程序，参数是连接字符串和sql语句。</h4><p><a href="http://www.cnblogs.com/jimcsharp/p/5590076.html" target="_blank" rel="noopener">http://www.cnblogs.com/jimcsharp/p/5590076.html</a></p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.net爬虫]]></title>
      <url>/2017/08/16/csharp%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<h4 id="准备第三方插件"><a href="#准备第三方插件" class="headerlink" title="准备第三方插件"></a>准备第三方插件</h4><p>HtmlAgilityPack 在nuget中可以找到并下载 然后在项目中引用</p>
<h4 id="代码步骤"><a href="#代码步骤" class="headerlink" title="代码步骤"></a>代码步骤</h4><p>从指定网站把网页的html获得</p>
<p><code>WebRequest request = WebRequest.Create(&quot;http://www.hnzbcg.com.cn/hnzbcg/cgxx/cggg/A080302index_1.htm&quot;);
            WebResponse response = request.GetResponse();
            StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.GetEncoding(&quot;gb2312&quot;));
            string s = reader.ReadToEnd();</code></p>
<p>将获得的html字符串传入 这个插件的具体使用可以参考<a href="http://www.cnblogs.com/GmrBrian/p/6201237.html" target="_blank" rel="noopener">http://www.cnblogs.com/GmrBrian/p/6201237.html</a></p>
<p><code>HtmlDocument doc = new HtmlDocument();
            doc.LoadHtml(s);
            HtmlNode div = doc.DocumentNode.SelectSingleNode(&quot;//a[@class=&#39;GrayLink12&#39;]&quot;);
            HtmlNodeCollection hrefList = doc.DocumentNode.SelectNodes(&quot;//a[@class=&#39;GrayLink12&#39;]&quot;);
            List&lt;string&gt; list = new List&lt;string&gt;();</code></p>
]]></content>
      
        <categories>
            
            <category> .net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c# </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js 在当前日期往前推N天（除去工作日）]]></title>
      <url>/2017/08/16/js-%E5%9C%A8%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E5%BE%80%E5%89%8D%E6%8E%A8N%E5%A4%A9%EF%BC%88%E9%99%A4%E5%8E%BB%E5%B7%A5%E4%BD%9C%E6%97%A5%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>代码如下：</p>
</blockquote>
<p>JavaScript将日期往前推n天，思路是先判断当前的日期是否是工作日，是的话就继续往前推，不是的话就把这一天给过滤掉，用count计数。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"datePicker/WdatePicker.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.7.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断是否为工作日</span></span></span><br><span class="line"><span class="javascript">     <span class="function"><span class="keyword">function</span> <span class="title">isWorkday</span>(<span class="params">date</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//var date = !date ? new Date() : new Date(date);</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>(date);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> getday = date.getDay();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (getday == <span class="number">0</span> || getday == <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//不是返回False</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取Date对象的年月日xxxx-xx-xx</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">dateToyymmdd</span>(<span class="params">d</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> month=d.getMonth()+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> day = d.getDate();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(month&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="javascript">        month = <span class="string">"0"</span>+month;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(day&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="javascript">        day = <span class="string">"0"</span>+day;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> val = d.getFullYear()+<span class="string">"-"</span>+month+<span class="string">"-"</span>+day;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> val;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">//往前推5天除去工作日</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params">date</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> i=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>(date);<span class="comment">//获取传入的时间</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">while</span>(i&lt;<span class="number">5</span>)</span></span><br><span class="line"><span class="undefined">    &#123;</span></span><br><span class="line"><span class="javascript">        d.setDate(d.getDate()<span class="number">-1</span>);<span class="comment">//获取前一天时间</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> val=dateToyymmdd(d);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//alert(isWorkday("2017-7-30")) ;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//alert(val+""+isWorkday(val));</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(isWorkday(val))</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="undefined">            i++;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">continue</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> val = dateToyymmdd(d);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> val;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#btn"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> v=$(<span class="string">"#btn"</span>).val();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#label1"</span>).html(back(v));</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//alert(back('2017-08-02'));</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"btn"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"WdatePicker()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"label1"</span> &gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 时间 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
